{"version":3,"file":"node.test.js","sourceRoot":"/","sources":["test/node.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @vitest-environment node\n */\n\nimport { describe, it, expect } from \"vitest\";\nimport { FileforgeClient } from \"@/client\";\nimport * as fs from \"node:fs\";\nimport internal, { Readable } from \"node:stream\";\nimport { fileFromPath } from \"formdata-node/file-from-path\";\nimport { BadRequestError, UnauthorizedError } from \"@/client/codegen/api\";\n\nconst NODE_VERSION = parseInt(process.versions.node.split(\".\")[0]);\n\ndescribe(\"node\", () => {\n  it(\"should work with staging\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n      environment: \"https://api.staging.Fileforge.com\",\n    });\n\n    await ff.getStatus();\n  });\n\n  it(\"should work with prod\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    await ff.getStatus();\n  });\n\n  it(\"should throw verbose errors\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: \"invalid\",\n    });\n\n    try {\n      await ff.pdf.generate(\n        [\n          await fileFromPath(__dirname + \"/samples/index.html\", \"index.html\", {\n            type: \"text/html\",\n          }),\n        ],\n        {\n          options: { host: true },\n        },\n      );\n    } catch (e) {\n      expect(e).toBeInstanceOf(UnauthorizedError);\n    }\n\n    const authentifiedFf = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    try {\n      await authentifiedFf.pdf.generate(\n        [\n          await fileFromPath(__dirname + \"/samples/index.html\", \"doc.html\", {\n            type: \"text/html\",\n          }),\n        ],\n        {\n          options: { host: true },\n        },\n      );\n    } catch (e) {\n      expect(e).toBeInstanceOf(BadRequestError);\n    }\n  });\n\n  it.skipIf(NODE_VERSION >= 20)(\"should work with node < 20\", () => {\n    // Ensure that File is not available in the global scope\n    expect(global.File).toBeUndefined();\n\n    expect(\n      new FileforgeClient({\n        apiKey: process.env.FILEFORGE_API_KEY,\n      }),\n    ).toBeInstanceOf(FileforgeClient);\n  });\n\n  it.skipIf(NODE_VERSION < 20)(\"should work with node >= 20\", () => {\n    // Ensure that File is available in the global scope\n    expect(global.File).toBeDefined();\n\n    expect(\n      new FileforgeClient({\n        apiKey: process.env.FILEFORGE_API_KEY,\n      }),\n    ).toBeInstanceOf(FileforgeClient);\n  });\n\n  it.skipIf(NODE_VERSION < 20)(\"should take File\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    const response = await ff.pdf.form.mark(\n      new File([fs.readFileSync(__dirname + \"/samples/form.pdf\")], \"form.pdf\", {\n        type: \"application/pdf\",\n      }),\n      { options: {} },\n    );\n\n    expect(response).toBeInstanceOf(internal.Readable);\n  });\n\n  it(\"should take File polyfill\", async () => {\n    // Use a polyfill for File. This allows the user to pass a file name\n    const { File } = await import(\"@web-std/file\");\n\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    await ff.pdf.form.mark(\n      new File(\n        [fs.readFileSync(__dirname + \"/samples/form.pdf\")],\n        \"form-polyfilled.pdf\",\n        {\n          type: \"application/pdf\",\n        },\n      ),\n      { options: {} },\n    );\n  });\n\n  it(\"should take fs.createReadStream\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    await ff.pdf.form.mark(\n      fs.createReadStream(__dirname + \"/samples/form.pdf\"),\n      {},\n    );\n  });\n\n  it(\"should take multiple fs.createReadStream\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    await ff.pdf.merge(\n      [\n        fs.createReadStream(__dirname + \"/samples/form.pdf\"),\n        fs.createReadStream(__dirname + \"/samples/form.pdf\"),\n      ],\n      {},\n    );\n  });\n\n  it.skipIf(NODE_VERSION < 20)(\"should work with generation\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    const document = await ff.pdf.generate(\n      [\n        new File(\n          [\"<!doctype html><html><body><h1>Hello world</h1></body></html>\"],\n          \"index.html\",\n          {\n            type: \"text/html\",\n          },\n        ),\n      ],\n      {\n        options: {\n          host: true,\n        },\n      },\n    );\n\n    expect(document.url).toBeDefined();\n  });\n\n  it.skipIf(NODE_VERSION < 20)(\n    \"should work with generation without host\",\n    async () => {\n      const ff = new FileforgeClient({\n        apiKey: process.env.FILEFORGE_API_KEY,\n      });\n\n      const document = await ff.pdf.generate(\n        [\n          new File(\n            [\"<!doctype html><html><body><h1>Hello world</h1></body></html>\"],\n            \"index.html\",\n            {\n              type: \"text/html\",\n            },\n          ),\n        ],\n        { options: {} },\n      );\n\n      expect(document).toBeDefined();\n    },\n  );\n\n  it(\"should decode file in generate\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    const file = await ff.pdf.generate(\n      [\n        await fileFromPath(__dirname + \"/samples/index.html\", \"index.html\", {\n          type: \"text/html\",\n        }),\n      ],\n      {},\n    );\n\n    expect(file).toBeInstanceOf(Readable);\n  });\n\n  it(\"should create index from string\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    const file = await ff.pdf.generate(\n      \"<!doctype text><html><body><h1>Hello world</h1></body></html>\",\n      {},\n    );\n\n    expect(file).toBeInstanceOf(Readable);\n  });\n\n  it(\"should decode json in generate\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    const { url } = await ff.pdf.generate(\n      [\n        await fileFromPath(__dirname + \"/samples/index.html\", \"index.html\", {\n          type: \"text/html\",\n        }),\n      ],\n      {\n        options: { host: true },\n      },\n    );\n\n    expect(url).toBeDefined();\n  });\n});\n"]}