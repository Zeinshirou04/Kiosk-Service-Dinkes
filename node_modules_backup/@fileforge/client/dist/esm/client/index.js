import { FileforgeClient as InternalClient } from "./codegen";
export { Fileforge } from "./codegen";
import { Pdf as CodegenPDF } from "./codegen/api/resources/pdf/client/Client";
import { File } from "formdata-node";
export class Pdf extends CodegenPDF {
    async generate(files, options, request) {
        let parsedFiles = files;
        if (typeof files === "string") {
            parsedFiles = [
                new File([files], "index.html", {
                    type: "text/html",
                }),
            ];
        }
        const params = [
            parsedFiles,
            options,
            request,
        ];
        const responseStream = (await super.generate(...params));
        switch (options.options?.host) {
            case true:
                if (responseStream instanceof ReadableStream) {
                    // @ts-expect-error
                    return (await new Response(responseStream).json());
                }
                else {
                    // @ts-expect-error
                    return JSON.parse(Buffer.concat(await responseStream.toArray()));
                }
            default:
                // @ts-expect-error
                return responseStream;
        }
    }
}
export class FileforgeClient extends InternalClient {
    get pdf() {
        // @ts-expect-error
        return (this._pdf ??= new Pdf(this._options));
    }
}
//# sourceMappingURL=index.js.map