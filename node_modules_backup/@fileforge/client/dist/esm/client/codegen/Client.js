/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import urlJoin from "url-join";
import * as serializers from "./serialization/index";
import * as errors from "./errors/index";
import { Pdf } from "./api/resources/pdf/client/Client";
export class FileforgeClient {
    _options;
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Get the status of the API
     *
     * @param {FileforgeClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fileforge.getStatus()
     */
    async getStatus(requestOptions) {
        const _response = await core.fetcher({
            url: urlJoin((await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default, "status/"),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return await serializers.GetStatusResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }
        if (_response.error.reason === "status-code") {
            throw new errors.FileforgeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FileforgeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FileforgeTimeoutError();
            case "unknown":
                throw new errors.FileforgeError({
                    message: _response.error.errorMessage,
                });
        }
    }
    _pdf;
    get pdf() {
        return (this._pdf ??= new Pdf(this._options));
    }
    async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
//# sourceMappingURL=Client.js.map