{"version":3,"file":"snippets.test.js","sourceRoot":"/","sources":["test/snippets.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @vitest-environment node\n */\nimport { beforeAll } from \"vitest\";\nimport { describe, it, expect } from \"vitest\";\nimport { FileforgeClient } from \"@/client\";\nimport { FormDetectResponseItem } from \"@/client/codegen/api/resources/pdf/resources/form/types/FormDetectResponseItem\";\nimport { FormFillRequestOptionsFieldsItemValue } from \"@/client/codegen/api/resources/pdf/resources/form/types/FormFillRequestOptionsFieldsItemValue\";\nimport * as fs from \"node:fs\";\nimport internal, { Readable } from \"node:stream\";\nimport { fileFromPath } from \"formdata-node/file-from-path\";\nimport { BadRequestError, UnauthorizedError } from \"@/client/codegen/api\";\nimport { pipeline } from \"node:stream/promises\";\n\nconst NODE_VERSION = parseInt(process.versions.node.split(\".\")[0]);\n\ndescribe(\"node\", () => {\n  beforeAll(() => {\n    if (!process.env.FILEFORGE_API_KEY) {\n      throw new Error(\"FILEFORGE_API_KEY is not set\");\n    }\n  });\n\n  it(\"convert docx snippet should work\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    try {\n      const docxFile = fs.createReadStream(\n        __dirname + \"/samples/document-simple.docx\",\n      );\n      const pdfStream = await ff.pdf.fromDocx(\n        docxFile,\n        {},\n        {\n          timeoutInSeconds: 30,\n        },\n      );\n\n      pdfStream.pipe(fs.createWriteStream(\"./result_docx.pdf\"));\n      console.log(\"PDF conversion successful. Stream ready.\");\n\n      expect(pdfStream).toBeInstanceOf(Readable);\n    } catch (error) {\n      console.error(\"Error during PDF conversion:\", error);\n      throw error;\n    }\n  }, 30000);\n\n  it.skipIf(NODE_VERSION < 20)(\"generate from HTML should work\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    try {\n      const pdf = await ff.pdf.generate(\n        [\n          new File(\n            [\"<!doctype html><html><body><h1>Hello world</h1></body></html>\"],\n            \"index.html\",\n            {\n              type: \"text/html\",\n            },\n          ),\n        ],\n        {\n          options: {\n            host: true,\n          },\n        },\n        {\n          timeoutInSeconds: 30,\n        },\n      );\n\n      console.log(pdf.url);\n      expect(pdf.url).toBeDefined();\n    } catch (error) {\n      console.error(\"Error during PDF generation:\", error);\n      throw error;\n    }\n  });\n\n  it.skipIf(NODE_VERSION < 20)(\"merge PDFs should work\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    try {\n      const pdfFiles = [\n        fs.createReadStream(__dirname + \"/pdf1.pdf\"),\n        fs.createReadStream(__dirname + \"/pdf2.pdf\"),\n      ];\n      const mergedPdfStream = await ff.pdf.merge(\n        pdfFiles,\n        {\n          options: {\n            // Specify merge options if any\n          },\n        },\n        {\n          timeoutInSeconds: 60,\n        },\n      );\n      mergedPdfStream.pipe(fs.createWriteStream(\"./result_merge.pdf\"));\n      console.log(\"PDF merge successful. Stream ready.\");\n      expect(mergedPdfStream).toBeInstanceOf(Readable);\n    } catch (error) {\n      console.error(\"Error during PDF merge:\", error);\n      throw error;\n    }\n  });\n\n  it.skipIf(NODE_VERSION < 20)(\n    \"detect form fields in PDFs should work\",\n    async () => {\n      const ff = new FileforgeClient({\n        apiKey: process.env.FILEFORGE_API_KEY,\n      });\n\n      try {\n        const resultObject = await ff.pdf.form.detect(\n          new File(\n            [fs.readFileSync(__dirname + \"/samples/form.pdf\")],\n            \"form.pdf\",\n            {\n              type: \"application/pdf\",\n            },\n          ),\n          { options: {} },\n        );\n\n        console.log(resultObject);\n        expect(resultObject).toBeInstanceOf(Array<FormDetectResponseItem>);\n      } catch (error) {\n        console.error(\"Error during PDF form detect:\", error);\n        throw error;\n      }\n    },\n  );\n\n  it.skipIf(NODE_VERSION < 20)(\"mark fields in PDFs should work\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    try {\n      const pdfStream = await ff.pdf.form.mark(\n        new File(\n          [fs.readFileSync(__dirname + \"/samples/form.pdf\")],\n          \"form.pdf\",\n          {\n            type: \"application/pdf\",\n          },\n        ),\n        { options: {} },\n      );\n\n      pdfStream.pipe(fs.createWriteStream(\"./result_mark.pdf\"));\n      expect(pdfStream).toBeInstanceOf(Readable);\n    } catch (error) {\n      console.error(\"Error during PDF form mark:\", error);\n      throw error;\n    }\n  });\n\n  it.skipIf(NODE_VERSION < 20)(\"fill fields in PDFs should work\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    try {\n      const formFillRequest = {\n        options: {\n          fields: [\n            {\n              name: \"Producer Name\",\n              type: \"PDFTextField\",\n              value: \"Titouan Launay\",\n            } as FormFillRequestOptionsFieldsItemValue,\n          ],\n        },\n      };\n      const requestOptions = {\n        timeoutInSeconds: 60,\n        maxRetries: 3,\n      };\n      const filledPdfStream = await ff.pdf.form.fill(\n        new File(\n          [fs.readFileSync(__dirname + \"/samples/form.pdf\")],\n          \"form.pdf\",\n          {\n            type: \"application/pdf\",\n          },\n        ),\n        formFillRequest,\n        requestOptions,\n      );\n\n      filledPdfStream.pipe(fs.createWriteStream(\"./result_filled.pdf\"));\n      expect(filledPdfStream).toBeInstanceOf(Readable);\n      console.log(\"PDF form filling successful. Stream ready.\");\n    } catch (error) {\n      console.error(\"Error during PDF form filling:\", error);\n    }\n  });\n\n  it.skipIf(NODE_VERSION < 20)(\"Split\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    try {\n      const splitRequest = {\n        options: {\n          splitPage: 1,\n        },\n      };\n      const requestOptions = {\n        timeoutInSeconds: 60,\n        maxRetries: 3,\n      };\n      const splitArchiveStream = await ff.pdf.split(\n        new File(\n          [fs.readFileSync(__dirname + \"/samples/form.pdf\")],\n          \"form.pdf\",\n          {\n            type: \"application/pdf\",\n          },\n        ),\n        splitRequest,\n        requestOptions,\n      );\n\n      await pipeline(\n        splitArchiveStream,\n        fs.createWriteStream(\"./result_split.zip\"),\n      );\n      expect(splitArchiveStream).toBeInstanceOf(Readable);\n      console.log(\"Split successful. Zip Stream ready.\");\n    } catch (error) {\n      console.error(\"Error during PDF splitting:\", error);\n    }\n  });\n\n  it.skipIf(NODE_VERSION < 20)(\"Extract\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    try {\n      const extractRequest = {\n        options: {\n          start: 1,\n          end: 1,\n        },\n      };\n      const requestOptions = {\n        timeoutInSeconds: 60,\n        maxRetries: 3,\n      };\n      const extractStream = await ff.pdf.extract(\n        new File(\n          [fs.readFileSync(__dirname + \"/samples/form.pdf\")],\n          \"form.pdf\",\n          {\n            type: \"application/pdf\",\n          },\n        ),\n        extractRequest,\n        requestOptions,\n      );\n\n      await pipeline(\n        extractStream,\n        fs.createWriteStream(\"./result_extract.pdf\"),\n      );\n      expect(extractStream).toBeInstanceOf(Readable);\n      console.log(\"Extraction successful.Stream ready.\");\n    } catch (error) {\n      console.error(\"Error during PDF extraction:\", error);\n    }\n  });\n\n  it.skipIf(NODE_VERSION < 20)(\"Insert PDFs should work\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    try {\n      const pdfFiles = [\n        fs.createReadStream(__dirname + \"/pdf1.pdf\"),\n        fs.createReadStream(__dirname + \"/pdf2.pdf\"),\n      ];\n      const insertPDFStream = await ff.pdf.insert(\n        pdfFiles,\n        {\n          options: {\n            // Specify insert options if any\n            insertPage: 1,\n          },\n        },\n        {\n          timeoutInSeconds: 60,\n        },\n      );\n      insertPDFStream.pipe(fs.createWriteStream(\"./result_insert.pdf\"));\n      console.log(\"PDF inserted successfully. Stream ready.\");\n      expect(insertPDFStream).toBeInstanceOf(Readable);\n    } catch (error) {\n      console.error(\"Error during PDF insertion:\", error);\n      throw error;\n    }\n  });\n});\n"]}