{
  "version": 3,
  "sources": ["../../@fileforge/client/node_modules/qs/lib/formats.js", "../../@fileforge/client/node_modules/qs/lib/utils.js", "../../@fileforge/client/node_modules/qs/lib/stringify.js", "../../@fileforge/client/node_modules/qs/lib/parse.js", "../../@fileforge/client/node_modules/qs/lib/index.js", "../../url-join/lib/url-join.js", "../../@fileforge/client/dist/esm/client/codegen/api/client/codegen/api/index.ts", "../../@fileforge/client/dist/esm/client/codegen/api/resources/pdf/client/codegen/api/resources/pdf/index.ts", "../../@fileforge/client/dist/esm/client/codegen/api/resources/pdf/resources/form/client/codegen/api/resources/pdf/resources/form/index.ts", "../../@fileforge/client/dist/esm/client/codegen/api/resources/pdf/resources/form/types/client/codegen/api/resources/pdf/resources/form/types/FormDetectResponseItemIsEditableType.ts", "../../@fileforge/client/dist/esm/client/codegen/api/resources/pdf/resources/form/types/client/codegen/api/resources/pdf/resources/form/types/FormFillRequestOptionsFieldsItemTwoType.ts", "../../@fileforge/client/dist/esm/client/codegen/errors/client/codegen/errors/FileforgeError.ts", "../../@fileforge/client/dist/esm/client/codegen/errors/client/codegen/errors/FileforgeTimeoutError.ts", "../../@fileforge/client/dist/esm/client/codegen/api/errors/client/codegen/api/errors/BadRequestError.ts", "../../@fileforge/client/dist/esm/client/codegen/api/errors/client/codegen/api/errors/UnauthorizedError.ts", "../../@fileforge/client/dist/esm/client/codegen/api/errors/client/codegen/api/errors/InternalServerError.ts", "../../@fileforge/client/dist/esm/client/codegen/api/errors/client/codegen/api/errors/BadGatewayError.ts", "../../@fileforge/client/dist/esm/client/codegen/client/codegen/environments.ts", "../../@fileforge/client/dist/esm/client/codegen/core/fetcher/client/codegen/core/fetcher/Fetcher.ts", "../../@fileforge/client/dist/esm/client/codegen/core/runtime/client/codegen/core/runtime/runtime.ts", "../../@fileforge/client/dist/esm/client/codegen/core/fetcher/client/codegen/core/fetcher/Supplier.ts", "../../@fileforge/client/dist/esm/client/codegen/core/form-data-utils/client/codegen/core/form-data-utils/FormDataWrapper.ts", "../../@fileforge/client/dist/esm/client/codegen/client/codegen/Client.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/client/codegen/serialization/resources/pdf/index.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/types/client/codegen/serialization/resources/pdf/types/PdfFromDocxRequestOptions.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/types/client/codegen/serialization/resources/pdf/types/PdfGenerateRequestOptions.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/types/client/codegen/serialization/resources/pdf/types/PdfMergeRequestOptions.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/types/client/codegen/serialization/resources/pdf/types/PdfSplitRequestOptions.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/types/client/codegen/serialization/resources/pdf/types/PdfExtractRequestOptions.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/types/client/codegen/serialization/resources/pdf/types/PdfInsertRequestOptions.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/client/codegen/serialization/resources/pdf/resources/form/index.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormDetectRequestOptions.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormDetectResponseItemIsChecked.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormDetectResponseItemIsEditableType.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormDetectResponseItemIsEditable.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormDetectResponseItemIsMutuallyExclusive.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormDetectResponseItemIsCombed.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormDetectResponseItemType.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormDetectResponseItem.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormMarkRequestOptions.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormFillRequestOptionsFieldsItemValue.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormFillRequestOptionsFieldsItemChecked.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormFillRequestOptionsFieldsItemTwoType.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormFillRequestOptionsFieldsItemTwo.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormFillRequestOptionsFieldsItemThree.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormFillRequestOptionsFieldsItem.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/types/client/codegen/serialization/resources/pdf/resources/form/types/FormFillRequestOptions.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/resources/pdf/resources/form/client/client/codegen/serialization/resources/pdf/resources/form/client/detect.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/types/client/codegen/serialization/types/GetStatusResponse.ts", "../../@fileforge/client/dist/esm/client/codegen/serialization/types/client/codegen/serialization/types/ErrorSchema.ts", "../../@fileforge/client/dist/esm/client/codegen/api/resources/pdf/client/client/codegen/api/resources/pdf/client/Client.ts", "../../@fileforge/client/dist/esm/client/codegen/api/resources/pdf/resources/form/client/client/codegen/api/resources/pdf/resources/form/client/Client.ts", "../../@fileforge/client/dist/esm/client/client/index.ts"],
  "sourcesContent": ["'use strict';\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nvar Format = {\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\nmodule.exports = {\n    'default': Format.RFC3986,\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n", "'use strict';\n\nvar formats = require('./formats');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    while (queue.length > 1) {\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n\n        if (isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str, decoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== 'string') {\n        string = String(str);\n    }\n\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n\n    var out = '';\n    for (var i = 0; i < string.length; ++i) {\n        var c = string.charCodeAt(i);\n\n        if (\n            c === 0x2D // -\n            || c === 0x2E // .\n            || c === 0x5F // _\n            || c === 0x7E // ~\n            || (c >= 0x30 && c <= 0x39) // 0-9\n            || (c >= 0x41 && c <= 0x5A) // a-z\n            || (c >= 0x61 && c <= 0x7A) // A-Z\n            || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n        ) {\n            out += string.charAt(i);\n            continue;\n        }\n\n        if (c < 0x80) {\n            out = out + hexTable[c];\n            continue;\n        }\n\n        if (c < 0x800) {\n            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        if (c < 0xD800 || c >= 0xE000) {\n            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        i += 1;\n        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));\n        /* eslint operator-linebreak: [2, \"before\"] */\n        out += hexTable[0xF0 | (c >> 18)]\n            + hexTable[0x80 | ((c >> 12) & 0x3F)]\n            + hexTable[0x80 | ((c >> 6) & 0x3F)]\n            + hexTable[0x80 | (c & 0x3F)];\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    compactQueue(queue);\n\n    return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n", "'use strict';\n\nvar getSideChannel = require('side-channel');\nvar utils = require('./utils');\nvar formats = require('./formats');\nvar has = Object.prototype.hasOwnProperty;\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + '[]';\n    },\n    comma: 'comma',\n    indices: function indices(prefix, key) {\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\n\nvar isArray = Array.isArray;\nvar push = Array.prototype.push;\nvar pushToArray = function (arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaultFormat = formats['default'];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === 'string'\n        || typeof v === 'number'\n        || typeof v === 'boolean'\n        || typeof v === 'symbol'\n        || typeof v === 'bigint';\n};\n\nvar sentinel = {};\n\nvar stringify = function stringify(\n    object,\n    prefix,\n    generateArrayPrefix,\n    commaRoundTrip,\n    strictNullHandling,\n    skipNulls,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    format,\n    formatter,\n    encodeValuesOnly,\n    charset,\n    sideChannel\n) {\n    var obj = object;\n\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        obj = utils.maybeMap(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            obj = utils.maybeMap(obj, encoder);\n        }\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + '[]' : prefix;\n\n    for (var j = 0; j < objKeys.length; ++j) {\n        var key = objKeys[j];\n        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n\n        if (skipNulls && value === null) {\n            continue;\n        }\n\n        var keyPrefix = isArray(obj)\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix\n            : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');\n\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(\n            value,\n            keyPrefix,\n            generateArrayPrefix,\n            commaRoundTrip,\n            strictNullHandling,\n            skipNulls,\n            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            format,\n            formatter,\n            encodeValuesOnly,\n            charset,\n            valueSideChannel\n        ));\n    }\n\n    return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    var format = formats['default'];\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n\n    var filter = defaults.filter;\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var arrayFormat;\n    if (opts && opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if (opts && 'indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = 'indices';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];\n    if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n    var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n\n    var sideChannel = getSideChannel();\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(\n            obj[key],\n            key,\n            generateArrayPrefix,\n            commaRoundTrip,\n            options.strictNullHandling,\n            options.skipNulls,\n            options.encode ? options.encoder : null,\n            options.filter,\n            options.sort,\n            options.allowDots,\n            options.serializeDate,\n            options.format,\n            options.formatter,\n            options.encodeValuesOnly,\n            options.charset,\n            sideChannel\n        ));\n    }\n\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        } else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n", "'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictNullHandling: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    return val;\n};\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = { __proto__: null };\n\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n            val = utils.maybeMap(\n                parseArrayValue(part.slice(pos + 1), options),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(val);\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        if (has.call(obj, key)) {\n            obj[key] = utils.combine(obj[key], val);\n        } else {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var index = parseInt(cleanRoot, 10);\n            if (!options.parseArrays && cleanRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== cleanRoot\n                && String(index) === cleanRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (cleanRoot !== '__proto__') {\n                obj[cleanRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    return {\n        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    if (options.allowSparse === true) {\n        return obj;\n    }\n\n    return utils.compact(obj);\n};\n", "'use strict';\n\nvar stringify = require('./stringify');\nvar parse = require('./parse');\nvar formats = require('./formats');\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n", "(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n", "export * from \"./resources\";\nexport * from \"./types\";\nexport * from \"./errors\";\n", "export * from \"./types\";\nexport * from \"./resources\";\nexport * from \"./client\";\n", "export * from \"./types\";\nexport * from \"./client\";\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nexport type FormDetectResponseItemIsEditableType = \"PDFDropdown\" | \"PDFOptionList\";\n\nexport const FormDetectResponseItemIsEditableType = {\n    PdfDropdown: \"PDFDropdown\",\n    PdfOptionList: \"PDFOptionList\",\n} as const;\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nexport type FormFillRequestOptionsFieldsItemTwoType = \"PDFOptionList\" | \"PDFDropdown\";\n\nexport const FormFillRequestOptionsFieldsItemTwoType = {\n    PdfOptionList: \"PDFOptionList\",\n    PdfDropdown: \"PDFDropdown\",\n} as const;\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nexport class FileforgeError extends Error {\n    readonly statusCode?: number;\n    readonly body?: unknown;\n\n    constructor({ message, statusCode, body }: { message?: string; statusCode?: number; body?: unknown }) {\n        super(buildMessage({ message, statusCode, body }));\n        Object.setPrototypeOf(this, FileforgeError.prototype);\n        if (statusCode != null) {\n            this.statusCode = statusCode;\n        }\n\n        if (body !== undefined) {\n            this.body = body;\n        }\n    }\n}\n\nfunction buildMessage({\n    message,\n    statusCode,\n    body,\n}: {\n    message: string | undefined;\n    statusCode: number | undefined;\n    body: unknown | undefined;\n}): string {\n    let lines: string[] = [];\n    if (message != null) {\n        lines.push(message);\n    }\n\n    if (statusCode != null) {\n        lines.push(`Status code: ${statusCode.toString()}`);\n    }\n\n    if (body != null) {\n        lines.push(`Body: ${JSON.stringify(body, undefined, 2)}`);\n    }\n\n    return lines.join(\"\\n\");\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nexport class FileforgeTimeoutError extends Error {\n    constructor() {\n        super(\"Timeout\");\n        Object.setPrototypeOf(this, FileforgeTimeoutError.prototype);\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as errors from \"../../errors/index\";\nimport * as Fileforge from \"../index\";\n\nexport class BadRequestError extends errors.FileforgeError {\n    constructor(body: Fileforge.ErrorSchema) {\n        super({\n            message: \"BadRequestError\",\n            statusCode: 400,\n            body: body,\n        });\n        Object.setPrototypeOf(this, BadRequestError.prototype);\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as errors from \"../../errors/index\";\nimport * as Fileforge from \"../index\";\n\nexport class UnauthorizedError extends errors.FileforgeError {\n    constructor(body: Fileforge.ErrorSchema) {\n        super({\n            message: \"UnauthorizedError\",\n            statusCode: 401,\n            body: body,\n        });\n        Object.setPrototypeOf(this, UnauthorizedError.prototype);\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as errors from \"../../errors/index\";\n\nexport class InternalServerError extends errors.FileforgeError {\n    constructor(body?: unknown) {\n        super({\n            message: \"InternalServerError\",\n            statusCode: 500,\n            body: body,\n        });\n        Object.setPrototypeOf(this, InternalServerError.prototype);\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as errors from \"../../errors/index\";\nimport * as Fileforge from \"../index\";\n\nexport class BadGatewayError extends errors.FileforgeError {\n    constructor(body: Fileforge.ErrorSchema) {\n        super({\n            message: \"BadGatewayError\",\n            statusCode: 502,\n            body: body,\n        });\n        Object.setPrototypeOf(this, BadGatewayError.prototype);\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nexport const FileforgeEnvironment = {\n    Default: \"https://api.fileforge.com\",\n} as const;\n\nexport type FileforgeEnvironment = typeof FileforgeEnvironment.Default;\n", "import qs from \"qs\";\nimport { RUNTIME } from \"../runtime\";\nimport { APIResponse } from \"./APIResponse\";\n\nexport type FetchFunction = <R = unknown>(\n  args: Fetcher.Args,\n) => Promise<APIResponse<R, Fetcher.Error>>;\n\nexport declare namespace Fetcher {\n  export interface Args {\n    url: string;\n    method: string;\n    contentType?: string;\n    headers?: Record<string, string | undefined>;\n    queryParameters?: Record<string, string | string[] | object | object[]>;\n    body?: unknown;\n    timeoutMs?: number;\n    maxRetries?: number;\n    withCredentials?: boolean;\n    abortSignal?: AbortSignal;\n    responseType?: \"json\" | \"blob\" | \"streaming\" | \"text\";\n  }\n\n  export type Error =\n    | FailedStatusCodeError\n    | NonJsonError\n    | TimeoutError\n    | UnknownError;\n\n  export interface FailedStatusCodeError {\n    reason: \"status-code\";\n    statusCode: number;\n    body: unknown;\n  }\n\n  export interface NonJsonError {\n    reason: \"non-json\";\n    statusCode: number;\n    rawBody: string;\n  }\n\n  export interface TimeoutError {\n    reason: \"timeout\";\n  }\n\n  export interface UnknownError {\n    reason: \"unknown\";\n    errorMessage: string;\n  }\n}\n\nconst INITIAL_RETRY_DELAY = 1;\nconst MAX_RETRY_DELAY = 60;\nconst DEFAULT_MAX_RETRIES = 2;\n\nasync function fetcherImpl<R = unknown>(\n  args: Fetcher.Args,\n): Promise<APIResponse<R, Fetcher.Error>> {\n  const headers: Record<string, string> = {};\n  if (args.body !== undefined && args.contentType != null) {\n    headers[\"Content-Type\"] = args.contentType;\n  }\n\n  if (args.headers != null) {\n    for (const [key, value] of Object.entries(args.headers)) {\n      if (value != null) {\n        headers[key] = value;\n      }\n    }\n  }\n\n  const url =\n    Object.keys(args.queryParameters ?? {}).length > 0\n      ? `${args.url}?${qs.stringify(args.queryParameters, { arrayFormat: \"repeat\" })}`\n      : args.url;\n\n  let body: BodyInit | undefined = undefined;\n  const maybeStringifyBody = (body: any) => {\n    if (body instanceof Uint8Array) {\n      return body;\n    } else {\n      return JSON.stringify(body);\n    }\n  };\n\n  if (args.body instanceof (await import(\"formdata-node\")).FormData) {\n    body = args.body;\n  } else {\n    try {\n      const Readable = (await import(\"stream\")).Readable;\n\n      if (args.body instanceof Readable) {\n        // @ts-expect-error\n        body = args.body;\n      } else {\n        body = maybeStringifyBody(args.body);\n      }\n    } catch (e) {\n      body = maybeStringifyBody(args.body);\n    }\n  }\n\n  // In Node.js environments, the SDK always uses`node-fetch`.\n  // If not in Node.js the SDK uses global fetch if available,\n  // and falls back to node-fetch.\n  const fetchFn =\n    RUNTIME.type === \"node\"\n      ? // `.default` is required due to this issue:\n        // https://github.com/node-fetch/node-fetch/issues/450#issuecomment-387045223\n        ((await import(\"node-fetch\")).default as any)\n      : typeof fetch == \"function\"\n        ? fetch\n        : ((await import(\"node-fetch\")).default as any);\n\n  const makeRequest = async (): Promise<Response> => {\n    const signals: AbortSignal[] = [];\n\n    // Add timeout signal\n    let timeoutAbortId: NodeJS.Timeout | undefined = undefined;\n    if (args.timeoutMs != null) {\n      const { signal, abortId } = getTimeoutSignal(args.timeoutMs);\n      timeoutAbortId = abortId;\n      signals.push(signal);\n    }\n\n    // Add arbitrary signal\n    if (args.abortSignal != null) {\n      signals.push(args.abortSignal);\n    }\n\n    const response = await fetchFn(url, {\n      method: args.method,\n      headers,\n      body,\n      signal: anySignal(signals),\n      credentials: args.withCredentials ? \"include\" : undefined,\n    });\n\n    if (timeoutAbortId != null) {\n      clearTimeout(timeoutAbortId);\n    }\n\n    return response;\n  };\n\n  try {\n    let response = await makeRequest();\n\n    for (let i = 0; i < (args.maxRetries ?? DEFAULT_MAX_RETRIES); ++i) {\n      if (\n        response.status === 408 ||\n        response.status === 409 ||\n        response.status === 429 ||\n        response.status >= 500\n      ) {\n        const delay = Math.min(\n          INITIAL_RETRY_DELAY * Math.pow(i, 2),\n          MAX_RETRY_DELAY,\n        );\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        response = await makeRequest();\n      } else {\n        break;\n      }\n    }\n\n    let body: unknown;\n    if (response.body != null && args.responseType === \"blob\") {\n      body = await response.blob();\n    } else if (response.body != null && args.responseType === \"streaming\") {\n      body = response.body;\n    } else if (response.body != null && args.responseType === \"text\") {\n      body = await response.text();\n    } else {\n      const text = await response.text();\n      if (text.length > 0) {\n        try {\n          body = JSON.parse(text);\n        } catch (err) {\n          return {\n            ok: false,\n            error: {\n              reason: \"non-json\",\n              statusCode: response.status,\n              rawBody: text,\n            },\n          };\n        }\n      }\n    }\n\n    if (response.status >= 200 && response.status < 400) {\n      return {\n        ok: true,\n        body: body as R,\n        headers: response.headers,\n      };\n    } else {\n      return {\n        ok: false,\n        error: {\n          reason: \"status-code\",\n          statusCode: response.status,\n          body: await response.json(),\n        },\n      };\n    }\n  } catch (error) {\n    if (args.abortSignal != null && args.abortSignal.aborted) {\n      return {\n        ok: false,\n        error: {\n          reason: \"unknown\",\n          errorMessage: \"The user aborted a request\",\n        },\n      };\n    } else if (error instanceof Error && error.name === \"AbortError\") {\n      return {\n        ok: false,\n        error: {\n          reason: \"timeout\",\n        },\n      };\n    } else if (error instanceof Error) {\n      return {\n        ok: false,\n        error: {\n          reason: \"unknown\",\n          errorMessage: error.message,\n        },\n      };\n    }\n\n    return {\n      ok: false,\n      error: {\n        reason: \"unknown\",\n        errorMessage: JSON.stringify(error),\n      },\n    };\n  }\n}\n\nconst TIMEOUT = \"timeout\";\n\nfunction getTimeoutSignal(timeoutMs: number): {\n  signal: AbortSignal;\n  abortId: NodeJS.Timeout;\n} {\n  const controller = new AbortController();\n  const abortId = setTimeout(() => controller.abort(TIMEOUT), timeoutMs);\n  return { signal: controller.signal, abortId };\n}\n\n/**\n * Returns an abort signal that is getting aborted when\n * at least one of the specified abort signals is aborted.\n *\n * Requires at least node.js 18.\n */\nfunction anySignal(...args: AbortSignal[] | [AbortSignal[]]): AbortSignal {\n  // Allowing signals to be passed either as array\n  // of signals or as multiple arguments.\n  const signals = <AbortSignal[]>(\n    (args.length === 1 && Array.isArray(args[0]) ? args[0] : args)\n  );\n\n  const controller = new AbortController();\n\n  for (const signal of signals) {\n    if (signal.aborted) {\n      // Exiting early if one of the signals\n      // is already aborted.\n      controller.abort((signal as any)?.reason);\n      break;\n    }\n\n    // Listening for signals and removing the listeners\n    // when at least one symbol is aborted.\n    signal.addEventListener(\n      \"abort\",\n      () => controller.abort((signal as any)?.reason),\n      {\n        signal: controller.signal,\n      },\n    );\n  }\n\n  return controller.signal;\n}\n\nexport const fetcher: FetchFunction = fetcherImpl;\n", "interface DenoGlobal {\n    version: {\n        deno: string;\n    };\n}\n\ninterface BunGlobal {\n    version: string;\n}\n\ndeclare const Deno: DenoGlobal;\ndeclare const Bun: BunGlobal;\n\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nconst isWebWorker =\n    typeof self === \"object\" &&\n    // @ts-ignore\n    typeof self?.importScripts === \"function\" &&\n    (self.constructor?.name === \"DedicatedWorkerGlobalScope\" ||\n        self.constructor?.name === \"ServiceWorkerGlobalScope\" ||\n        self.constructor?.name === \"SharedWorkerGlobalScope\");\n\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nconst isDeno =\n    typeof Deno !== \"undefined\" && typeof Deno.version !== \"undefined\" && typeof Deno.version.deno !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nconst isBun = typeof Bun !== \"undefined\" && typeof Bun.version !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nconst isNode =\n    typeof process !== \"undefined\" &&\n    Boolean(process.version) &&\n    Boolean(process.versions?.node) &&\n    // Deno spoofs process.versions.node, see https://deno.land/std@0.177.0/node/process.ts?s=versions\n    !isDeno &&\n    !isBun;\n\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n * https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js\n */\nconst isReactNative = typeof navigator !== \"undefined\" && navigator?.product === \"ReactNative\";\n\n/**\n * A constant that indicates which environment and version the SDK is running in.\n */\nexport const RUNTIME: Runtime = evaluateRuntime();\n\nexport interface Runtime {\n    type: \"browser\" | \"web-worker\" | \"deno\" | \"bun\" | \"node\" | \"react-native\" | \"unknown\";\n    version?: string;\n}\n\nfunction evaluateRuntime(): Runtime {\n    if (isBrowser) {\n        return {\n            type: \"browser\",\n            version: window.navigator.userAgent,\n        };\n    }\n\n    if (isWebWorker) {\n        return {\n            type: \"web-worker\",\n        };\n    }\n\n    if (isDeno) {\n        return {\n            type: \"deno\",\n            version: Deno.version.deno,\n        };\n    }\n\n    if (isBun) {\n        return {\n            type: \"bun\",\n            version: Bun.version,\n        };\n    }\n\n    if (isNode) {\n        return {\n            type: \"node\",\n            version: process.versions.node,\n        };\n    }\n\n    if (isReactNative) {\n        return {\n            type: \"react-native\",\n        };\n    }\n\n    return {\n        type: \"unknown\",\n    };\n}\n", "export type Supplier<T> = T | Promise<T> | (() => T | Promise<T>);\n\nexport const Supplier = {\n    get: async <T>(supplier: Supplier<T>): Promise<T> => {\n        if (typeof supplier === \"function\") {\n            return (supplier as () => T)();\n        } else {\n            return supplier;\n        }\n    },\n};\n", "import { RUNTIME } from \"../runtime\";\nimport { Blob } from \"formdata-node\";\n\ninterface CrossPlatformFormData {\n  append(key: string, value: any): void;\n}\n\nclass FormDataRequestBody {\n  private fd: any;\n  private encoder: any;\n\n  constructor(fd: any) {\n    this.fd = fd;\n  }\n\n  async setup(): Promise<void> {\n    if (this.encoder == null && RUNTIME.type === \"node\") {\n      this.encoder = new (await import(\"form-data-encoder\")).FormDataEncoder(\n        this.fd,\n      );\n    }\n  }\n\n  public async needsEncoder() {\n    if (RUNTIME.type !== \"node\") {\n      return false;\n    }\n\n    try {\n      return (await import(\"node:stream\")).Readable !== undefined;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * @returns the multipart form data request\n   */\n  public async getBody(): Promise<any> {\n    if (!(await this.needsEncoder())) {\n      return this.fd;\n    } else {\n      if (this.encoder == null) {\n        await this.setup();\n      }\n\n      return (await import(\"node:stream\")).Readable.from(this.encoder);\n    }\n  }\n\n  /**\n   * @returns headers that need to be added to the multipart form data request\n   */\n  public async getHeaders(): Promise<Record<string, string>> {\n    if (!(await this.needsEncoder())) {\n      return {};\n    } else {\n      if (this.encoder == null) {\n        await this.setup();\n      }\n\n      return {\n        ...this.encoder.headers,\n        \"Content-Length\": this.encoder.length,\n      };\n    }\n  }\n}\n\n/**\n * FormDataWrapper is a utility to make form data\n * requests across both Browser and Node.js runtimes.\n */\nexport class FormDataWrapper {\n  private fd: CrossPlatformFormData | undefined;\n\n  public async append(name: string, value: any): Promise<void> {\n    if (this.fd == null) {\n      this.fd = new (await import(\"formdata-node\")).FormData();\n    }\n\n    if (name === \"options\" && typeof value === \"string\") {\n      this.fd.append(\n        \"options\",\n        new Blob([value], { type: \"application/json\" }),\n      );\n\n      return;\n    }\n\n    try {\n      const Readable = (await import(\"stream\")).Readable;\n      if (RUNTIME.type === \"node\" && value instanceof Readable) {\n        const { stream, mime } = await (\n          await import(\"stream-mime-type\")\n        ).getMimeType(value);\n\n        // If there is no filename, generate a random one. This is especially useful for multiple file operations that don't rely on filenames.\n        let fileName = (\n          (Math.random() + 1).toString(36) + \"00000000000000000\"\n        ).slice(2, 7);\n\n        this.fd.append(name, {\n          type: mime,\n          name: fileName,\n          [Symbol.toStringTag]: \"File\",\n          stream() {\n            return stream;\n          },\n        });\n\n        return;\n      }\n    } catch (e) {}\n\n    this.fd.append(name, value);\n  }\n\n  public getRequest(): FormDataRequestBody {\n    return new FormDataRequestBody(this.fd);\n  }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as environments from \"./environments\";\nimport * as core from \"./core\";\nimport * as Fileforge from \"./api/index\";\nimport urlJoin from \"url-join\";\nimport * as serializers from \"./serialization/index\";\nimport * as errors from \"./errors/index\";\nimport { Pdf } from \"./api/resources/pdf/client/Client\";\n\nexport declare namespace FileforgeClient {\n    interface Options {\n        environment?: core.Supplier<environments.FileforgeEnvironment | string>;\n        apiKey?: core.Supplier<string | undefined>;\n    }\n\n    interface RequestOptions {\n        timeoutInSeconds?: number;\n        maxRetries?: number;\n        abortSignal?: AbortSignal;\n    }\n}\n\nexport class FileforgeClient {\n    constructor(protected readonly _options: FileforgeClient.Options = {}) {}\n\n    /**\n     * Get the status of the API\n     *\n     * @param {FileforgeClient.RequestOptions} requestOptions - Request-specific configuration.\n     *\n     * @example\n     *     await fileforge.getStatus()\n     */\n    public async getStatus(requestOptions?: FileforgeClient.RequestOptions): Promise<Fileforge.GetStatusResponse> {\n        const _response = await core.fetcher({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"status/\"\n            ),\n            method: \"GET\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n            },\n            contentType: \"application/json\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return await serializers.GetStatusResponse.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: \"passthrough\",\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: [\"response\"],\n            });\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            throw new errors.FileforgeError({\n                statusCode: _response.error.statusCode,\n                body: _response.error.body,\n            });\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    protected _pdf: Pdf | undefined;\n\n    public get pdf(): Pdf {\n        return (this._pdf ??= new Pdf(this._options));\n    }\n\n    protected async _getCustomAuthorizationHeaders() {\n        const apiKeyValue = await core.Supplier.get(this._options.apiKey);\n        return { \"X-API-Key\": apiKeyValue };\n    }\n}\n", "export * from \"./types\";\nexport * from \"./resources\";\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../index\";\nimport * as Fileforge from \"../../../../api/index\";\nimport * as core from \"../../../../core\";\n\nexport const PdfFromDocxRequestOptions: core.serialization.ObjectSchema<\n    serializers.PdfFromDocxRequestOptions.Raw,\n    Fileforge.PdfFromDocxRequestOptions\n> = core.serialization.object({\n    keepOriginalStyles: core.serialization.boolean().optional(),\n    templateLiterals: core.serialization.record(core.serialization.string(), core.serialization.string()).optional(),\n});\n\nexport declare namespace PdfFromDocxRequestOptions {\n    interface Raw {\n        keepOriginalStyles?: boolean | null;\n        templateLiterals?: Record<string, string> | null;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../index\";\nimport * as Fileforge from \"../../../../api/index\";\nimport * as core from \"../../../../core\";\n\nexport const PdfGenerateRequestOptions: core.serialization.ObjectSchema<\n    serializers.PdfGenerateRequestOptions.Raw,\n    Fileforge.PdfGenerateRequestOptions\n> = core.serialization.object({\n    test: core.serialization.boolean().optional(),\n    host: core.serialization.boolean().optional(),\n    expiresAt: core.serialization.date().optional(),\n    fileName: core.serialization.string().optional(),\n});\n\nexport declare namespace PdfGenerateRequestOptions {\n    interface Raw {\n        test?: boolean | null;\n        host?: boolean | null;\n        expiresAt?: string | null;\n        fileName?: string | null;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../index\";\nimport * as Fileforge from \"../../../../api/index\";\nimport * as core from \"../../../../core\";\n\nexport const PdfMergeRequestOptions: core.serialization.ObjectSchema<\n    serializers.PdfMergeRequestOptions.Raw,\n    Fileforge.PdfMergeRequestOptions\n> = core.serialization.object({});\n\nexport declare namespace PdfMergeRequestOptions {\n    interface Raw {}\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../index\";\nimport * as Fileforge from \"../../../../api/index\";\nimport * as core from \"../../../../core\";\n\nexport const PdfSplitRequestOptions: core.serialization.ObjectSchema<\n    serializers.PdfSplitRequestOptions.Raw,\n    Fileforge.PdfSplitRequestOptions\n> = core.serialization.object({\n    splitPage: core.serialization.number(),\n});\n\nexport declare namespace PdfSplitRequestOptions {\n    interface Raw {\n        splitPage: number;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../index\";\nimport * as Fileforge from \"../../../../api/index\";\nimport * as core from \"../../../../core\";\n\nexport const PdfExtractRequestOptions: core.serialization.ObjectSchema<\n    serializers.PdfExtractRequestOptions.Raw,\n    Fileforge.PdfExtractRequestOptions\n> = core.serialization.object({\n    start: core.serialization.number(),\n    end: core.serialization.number(),\n});\n\nexport declare namespace PdfExtractRequestOptions {\n    interface Raw {\n        start: number;\n        end: number;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../index\";\nimport * as Fileforge from \"../../../../api/index\";\nimport * as core from \"../../../../core\";\n\nexport const PdfInsertRequestOptions: core.serialization.ObjectSchema<\n    serializers.PdfInsertRequestOptions.Raw,\n    Fileforge.PdfInsertRequestOptions\n> = core.serialization.object({\n    insertPage: core.serialization.number(),\n});\n\nexport declare namespace PdfInsertRequestOptions {\n    interface Raw {\n        insertPage: number;\n    }\n}\n", "export * from \"./types\";\nexport * from \"./client\";\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\n\nexport const FormDetectRequestOptions: core.serialization.ObjectSchema<\n    serializers.pdf.FormDetectRequestOptions.Raw,\n    Fileforge.pdf.FormDetectRequestOptions\n> = core.serialization.object({});\n\nexport declare namespace FormDetectRequestOptions {\n    interface Raw {}\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\n\nexport const FormDetectResponseItemIsChecked: core.serialization.ObjectSchema<\n    serializers.pdf.FormDetectResponseItemIsChecked.Raw,\n    Fileforge.pdf.FormDetectResponseItemIsChecked\n> = core.serialization.object({\n    type: core.serialization.stringLiteral(\"PDFCheckBox\"),\n    isChecked: core.serialization.boolean().optional(),\n});\n\nexport declare namespace FormDetectResponseItemIsChecked {\n    interface Raw {\n        type: \"PDFCheckBox\";\n        isChecked?: boolean | null;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\n\nexport const FormDetectResponseItemIsEditableType: core.serialization.Schema<\n    serializers.pdf.FormDetectResponseItemIsEditableType.Raw,\n    Fileforge.pdf.FormDetectResponseItemIsEditableType\n> = core.serialization.enum_([\"PDFDropdown\", \"PDFOptionList\"]);\n\nexport declare namespace FormDetectResponseItemIsEditableType {\n    type Raw = \"PDFDropdown\" | \"PDFOptionList\";\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\nimport { FormDetectResponseItemIsEditableType } from \"./FormDetectResponseItemIsEditableType\";\n\nexport const FormDetectResponseItemIsEditable: core.serialization.ObjectSchema<\n    serializers.pdf.FormDetectResponseItemIsEditable.Raw,\n    Fileforge.pdf.FormDetectResponseItemIsEditable\n> = core.serialization.object({\n    type: FormDetectResponseItemIsEditableType,\n    options: core.serialization.list(core.serialization.string()).optional(),\n    isMultiselect: core.serialization.boolean().optional(),\n    selected: core.serialization.list(core.serialization.string()).optional(),\n    isEditable: core.serialization.boolean().optional(),\n});\n\nexport declare namespace FormDetectResponseItemIsEditable {\n    interface Raw {\n        type: FormDetectResponseItemIsEditableType.Raw;\n        options?: string[] | null;\n        isMultiselect?: boolean | null;\n        selected?: string[] | null;\n        isEditable?: boolean | null;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\n\nexport const FormDetectResponseItemIsMutuallyExclusive: core.serialization.ObjectSchema<\n    serializers.pdf.FormDetectResponseItemIsMutuallyExclusive.Raw,\n    Fileforge.pdf.FormDetectResponseItemIsMutuallyExclusive\n> = core.serialization.object({\n    type: core.serialization.stringLiteral(\"PDFRadioGroup\"),\n    options: core.serialization.list(core.serialization.string()).optional(),\n    selected: core.serialization.string().optional(),\n    isMutuallyExclusive: core.serialization.boolean().optional(),\n    isOffToggleable: core.serialization.boolean().optional(),\n});\n\nexport declare namespace FormDetectResponseItemIsMutuallyExclusive {\n    interface Raw {\n        type: \"PDFRadioGroup\";\n        options?: string[] | null;\n        selected?: string | null;\n        isMutuallyExclusive?: boolean | null;\n        isOffToggleable?: boolean | null;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\n\nexport const FormDetectResponseItemIsCombed: core.serialization.ObjectSchema<\n    serializers.pdf.FormDetectResponseItemIsCombed.Raw,\n    Fileforge.pdf.FormDetectResponseItemIsCombed\n> = core.serialization.object({\n    type: core.serialization.stringLiteral(\"PDFTextField\"),\n    defaultValue: core.serialization.string().optional(),\n    isPassword: core.serialization.boolean().optional(),\n    isRichFormatted: core.serialization.boolean().optional(),\n    isScrollable: core.serialization.boolean().optional(),\n    isCombed: core.serialization.boolean().optional(),\n    isMultiline: core.serialization.boolean().optional(),\n    isFileSelector: core.serialization.boolean().optional(),\n    maxLength: core.serialization.number().optional(),\n});\n\nexport declare namespace FormDetectResponseItemIsCombed {\n    interface Raw {\n        type: \"PDFTextField\";\n        defaultValue?: string | null;\n        isPassword?: boolean | null;\n        isRichFormatted?: boolean | null;\n        isScrollable?: boolean | null;\n        isCombed?: boolean | null;\n        isMultiline?: boolean | null;\n        isFileSelector?: boolean | null;\n        maxLength?: number | null;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\n\nexport const FormDetectResponseItemType: core.serialization.ObjectSchema<\n    serializers.pdf.FormDetectResponseItemType.Raw,\n    Fileforge.pdf.FormDetectResponseItemType\n> = core.serialization.object({\n    type: core.serialization.stringLiteral(\"PDFSignature\"),\n    defaultValue: core.serialization.string().optional(),\n});\n\nexport declare namespace FormDetectResponseItemType {\n    interface Raw {\n        type: \"PDFSignature\";\n        defaultValue?: string | null;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\nimport { FormDetectResponseItemIsChecked } from \"./FormDetectResponseItemIsChecked\";\nimport { FormDetectResponseItemIsEditable } from \"./FormDetectResponseItemIsEditable\";\nimport { FormDetectResponseItemIsMutuallyExclusive } from \"./FormDetectResponseItemIsMutuallyExclusive\";\nimport { FormDetectResponseItemIsCombed } from \"./FormDetectResponseItemIsCombed\";\nimport { FormDetectResponseItemType } from \"./FormDetectResponseItemType\";\n\nexport const FormDetectResponseItem: core.serialization.Schema<\n    serializers.pdf.FormDetectResponseItem.Raw,\n    Fileforge.pdf.FormDetectResponseItem\n> = core.serialization.undiscriminatedUnion([\n    FormDetectResponseItemIsChecked,\n    FormDetectResponseItemIsEditable,\n    FormDetectResponseItemIsMutuallyExclusive,\n    FormDetectResponseItemIsCombed,\n    FormDetectResponseItemType,\n]);\n\nexport declare namespace FormDetectResponseItem {\n    type Raw =\n        | FormDetectResponseItemIsChecked.Raw\n        | FormDetectResponseItemIsEditable.Raw\n        | FormDetectResponseItemIsMutuallyExclusive.Raw\n        | FormDetectResponseItemIsCombed.Raw\n        | FormDetectResponseItemType.Raw;\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\n\nexport const FormMarkRequestOptions: core.serialization.ObjectSchema<\n    serializers.pdf.FormMarkRequestOptions.Raw,\n    Fileforge.pdf.FormMarkRequestOptions\n> = core.serialization.object({});\n\nexport declare namespace FormMarkRequestOptions {\n    interface Raw {}\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\n\nexport const FormFillRequestOptionsFieldsItemValue: core.serialization.ObjectSchema<\n    serializers.pdf.FormFillRequestOptionsFieldsItemValue.Raw,\n    Fileforge.pdf.FormFillRequestOptionsFieldsItemValue\n> = core.serialization.object({\n    name: core.serialization.string(),\n    type: core.serialization.stringLiteral(\"PDFTextField\"),\n    value: core.serialization.string(),\n});\n\nexport declare namespace FormFillRequestOptionsFieldsItemValue {\n    interface Raw {\n        name: string;\n        type: \"PDFTextField\";\n        value: string;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\n\nexport const FormFillRequestOptionsFieldsItemChecked: core.serialization.ObjectSchema<\n    serializers.pdf.FormFillRequestOptionsFieldsItemChecked.Raw,\n    Fileforge.pdf.FormFillRequestOptionsFieldsItemChecked\n> = core.serialization.object({\n    name: core.serialization.string(),\n    type: core.serialization.stringLiteral(\"PDFCheckBox\"),\n    checked: core.serialization.boolean(),\n});\n\nexport declare namespace FormFillRequestOptionsFieldsItemChecked {\n    interface Raw {\n        name: string;\n        type: \"PDFCheckBox\";\n        checked: boolean;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\n\nexport const FormFillRequestOptionsFieldsItemTwoType: core.serialization.Schema<\n    serializers.pdf.FormFillRequestOptionsFieldsItemTwoType.Raw,\n    Fileforge.pdf.FormFillRequestOptionsFieldsItemTwoType\n> = core.serialization.enum_([\"PDFOptionList\", \"PDFDropdown\"]);\n\nexport declare namespace FormFillRequestOptionsFieldsItemTwoType {\n    type Raw = \"PDFOptionList\" | \"PDFDropdown\";\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\nimport { FormFillRequestOptionsFieldsItemTwoType } from \"./FormFillRequestOptionsFieldsItemTwoType\";\n\nexport const FormFillRequestOptionsFieldsItemTwo: core.serialization.ObjectSchema<\n    serializers.pdf.FormFillRequestOptionsFieldsItemTwo.Raw,\n    Fileforge.pdf.FormFillRequestOptionsFieldsItemTwo\n> = core.serialization.object({\n    name: core.serialization.string(),\n    type: FormFillRequestOptionsFieldsItemTwoType,\n    selected: core.serialization.list(core.serialization.string()),\n});\n\nexport declare namespace FormFillRequestOptionsFieldsItemTwo {\n    interface Raw {\n        name: string;\n        type: FormFillRequestOptionsFieldsItemTwoType.Raw;\n        selected: string[];\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\n\nexport const FormFillRequestOptionsFieldsItemThree: core.serialization.ObjectSchema<\n    serializers.pdf.FormFillRequestOptionsFieldsItemThree.Raw,\n    Fileforge.pdf.FormFillRequestOptionsFieldsItemThree\n> = core.serialization.object({\n    name: core.serialization.string(),\n    type: core.serialization.stringLiteral(\"PDFRadioGroup\"),\n    selected: core.serialization.string(),\n});\n\nexport declare namespace FormFillRequestOptionsFieldsItemThree {\n    interface Raw {\n        name: string;\n        type: \"PDFRadioGroup\";\n        selected: string;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\nimport { FormFillRequestOptionsFieldsItemValue } from \"./FormFillRequestOptionsFieldsItemValue\";\nimport { FormFillRequestOptionsFieldsItemChecked } from \"./FormFillRequestOptionsFieldsItemChecked\";\nimport { FormFillRequestOptionsFieldsItemTwo } from \"./FormFillRequestOptionsFieldsItemTwo\";\nimport { FormFillRequestOptionsFieldsItemThree } from \"./FormFillRequestOptionsFieldsItemThree\";\n\nexport const FormFillRequestOptionsFieldsItem: core.serialization.Schema<\n    serializers.pdf.FormFillRequestOptionsFieldsItem.Raw,\n    Fileforge.pdf.FormFillRequestOptionsFieldsItem\n> = core.serialization.undiscriminatedUnion([\n    FormFillRequestOptionsFieldsItemValue,\n    FormFillRequestOptionsFieldsItemChecked,\n    FormFillRequestOptionsFieldsItemTwo,\n    FormFillRequestOptionsFieldsItemThree,\n]);\n\nexport declare namespace FormFillRequestOptionsFieldsItem {\n    type Raw =\n        | FormFillRequestOptionsFieldsItemValue.Raw\n        | FormFillRequestOptionsFieldsItemChecked.Raw\n        | FormFillRequestOptionsFieldsItemTwo.Raw\n        | FormFillRequestOptionsFieldsItemThree.Raw;\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\nimport { FormFillRequestOptionsFieldsItem } from \"./FormFillRequestOptionsFieldsItem\";\n\nexport const FormFillRequestOptions: core.serialization.ObjectSchema<\n    serializers.pdf.FormFillRequestOptions.Raw,\n    Fileforge.pdf.FormFillRequestOptions\n> = core.serialization.object({\n    fields: core.serialization.list(FormFillRequestOptionsFieldsItem),\n});\n\nexport declare namespace FormFillRequestOptions {\n    interface Raw {\n        fields: FormFillRequestOptionsFieldsItem.Raw[];\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../../../../../index\";\nimport * as Fileforge from \"../../../../../../api/index\";\nimport * as core from \"../../../../../../core\";\nimport { FormDetectResponseItem } from \"../types/FormDetectResponseItem\";\n\nexport const Response: core.serialization.Schema<\n    serializers.pdf.form.detect.Response.Raw,\n    Fileforge.pdf.FormDetectResponseItem[]\n> = core.serialization.list(FormDetectResponseItem);\n\nexport declare namespace Response {\n    type Raw = FormDetectResponseItem.Raw[];\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../index\";\nimport * as Fileforge from \"../../api/index\";\nimport * as core from \"../../core\";\n\nexport const GetStatusResponse: core.serialization.ObjectSchema<\n    serializers.GetStatusResponse.Raw,\n    Fileforge.GetStatusResponse\n> = core.serialization.object({\n    status: core.serialization.string().optional(),\n});\n\nexport declare namespace GetStatusResponse {\n    interface Raw {\n        status?: string | null;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as serializers from \"../index\";\nimport * as Fileforge from \"../../api/index\";\nimport * as core from \"../../core\";\n\nexport const ErrorSchema: core.serialization.ObjectSchema<serializers.ErrorSchema.Raw, Fileforge.ErrorSchema> =\n    core.serialization.object({\n        statusCode: core.serialization.number(),\n        code: core.serialization.string(),\n        message: core.serialization.string(),\n    });\n\nexport declare namespace ErrorSchema {\n    interface Raw {\n        statusCode: number;\n        code: string;\n        message: string;\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as environments from \"../../../../environments\";\nimport * as core from \"../../../../core\";\nimport * as fs from \"fs\";\nimport * as Fileforge from \"../../../index\";\nimport * as stream from \"stream\";\nimport urlJoin from \"url-join\";\nimport * as errors from \"../../../../errors/index\";\nimport * as serializers from \"../../../../serialization/index\";\nimport { Form } from \"../resources/form/client/Client\";\n\nexport declare namespace Pdf {\n    interface Options {\n        environment?: core.Supplier<environments.FileforgeEnvironment | string>;\n        apiKey?: core.Supplier<string | undefined>;\n    }\n\n    interface RequestOptions {\n        timeoutInSeconds?: number;\n        maxRetries?: number;\n        abortSignal?: AbortSignal;\n    }\n}\n\n/**\n * PDF operations\n */\nexport class Pdf {\n    constructor(protected readonly _options: Pdf.Options = {}) {}\n\n    /**\n     * Converts a Microsoft Word document (.DOCX or .DOC) file to a PDF document.\n     *\n     * This service uses a LibreOffice headless server to perform the conversion, and may not support all features of the original document.\n     *\n     * **Known discrepancies**\n     *\n     * - Some fonts may not be available in the server, and may be substituted by a closest match.\n     * - Some complex formatting may not be preserved, such as background graphics.\n     *\n     * **Variables**\n     *\n     * Variable replacement is supported with various methods:\n     *\n     * - Templated litterals: `{{name}}`\n     * - Word variables, as listed in the document metadata: `{DOCVARIABLE \"name\"}`\n     *\n     * To enable variable replacement as Word variables for your account, please contact the FileForge support.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async fromDocx(\n        file: File | fs.ReadStream,\n        request: Fileforge.PdfFromDocxRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/docx/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Generates a PDF document from web assets.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     * @throws {@link Fileforge.BadGatewayError}\n     */\n    public async generate(\n        files: File[] | fs.ReadStream[],\n        request: Fileforge.PdfGenerateRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        for (const _file of files) {\n            await _request.append(\"files\", _file);\n        }\n\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/generate/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                case 502:\n                    throw new Fileforge.BadGatewayError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Merges multiple PDF documents into a single PDF document.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async merge(\n        files: File[] | fs.ReadStream[],\n        request: Fileforge.PdfMergeRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        for (const _file of files) {\n            await _request.append(\"files\", _file);\n        }\n\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/merge/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Splits a PDF document into 2 PDF documents. Returns a zip file containing the 2 documents. Each document is named after the original document with a suffix added to indicate the range of pages it contains.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async split(\n        file: File | fs.ReadStream,\n        request: Fileforge.PdfSplitRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        await _request.append(\"options\", JSON.stringify(request.options));\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/split/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Extracts a range of pages from a PDF document. The start and end pages are included in the extracted document. The extracted document is named after the original document with a suffix added to indicate the range of pages it contains (ex:document_extracted\\_\\$start\\_\\$end.pdf).\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async extract(\n        file: File | fs.ReadStream,\n        request: Fileforge.PdfExtractRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        await _request.append(\"options\", JSON.stringify(request.options));\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/extract/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Insert a PDF document into another PDF document at a specified page. The inserted document is named after the original document with a suffix added to indicate the range of pages it contains (ex:document_inserted\\_\\$insertPage\\_\\$document2.pdf). Note: The first document is the parent document and the second document is the document to be inserted.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async insert(\n        files: File[] | fs.ReadStream[],\n        request: Fileforge.PdfInsertRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        await _request.append(\"options\", JSON.stringify(request.options));\n        for (const _file of files) {\n            await _request.append(\"files\", _file);\n        }\n\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/insert/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    protected _form: Form | undefined;\n\n    public get form(): Form {\n        return (this._form ??= new Form(this._options));\n    }\n\n    protected async _getCustomAuthorizationHeaders() {\n        const apiKeyValue = await core.Supplier.get(this._options.apiKey);\n        return { \"X-API-Key\": apiKeyValue };\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as environments from \"../../../../../../environments\";\nimport * as core from \"../../../../../../core\";\nimport * as fs from \"fs\";\nimport * as Fileforge from \"../../../../../index\";\nimport urlJoin from \"url-join\";\nimport * as serializers from \"../../../../../../serialization/index\";\nimport * as errors from \"../../../../../../errors/index\";\nimport * as stream from \"stream\";\n\nexport declare namespace Form {\n    interface Options {\n        environment?: core.Supplier<environments.FileforgeEnvironment | string>;\n        apiKey?: core.Supplier<string | undefined>;\n    }\n\n    interface RequestOptions {\n        timeoutInSeconds?: number;\n        maxRetries?: number;\n        abortSignal?: AbortSignal;\n    }\n}\n\nexport class Form {\n    constructor(protected readonly _options: Form.Options = {}) {}\n\n    /**\n     * Returns a list of form fields detected in the PDF document, along with their location, options and requirements. For a more visual representation, use the /pdf/form/mark endpoint.\n     *\n     * @param {File | fs.ReadStream} file\n     * @param {Fileforge.pdf.FormDetectRequest} request\n     * @param {Form.RequestOptions} requestOptions - Request-specific configuration.\n     *\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     *\n     * @example\n     *     await fileforge.pdf.form.detect(fs.createReadStream(\"/path/to/your/file\"), {})\n     */\n    public async detect(\n        file: File | fs.ReadStream,\n        request: Fileforge.pdf.FormDetectRequest,\n        requestOptions?: Form.RequestOptions\n    ): Promise<Fileforge.pdf.FormDetectResponseItem[]> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/form/detect/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return await serializers.pdf.form.detect.Response.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: \"passthrough\",\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: [\"response\"],\n            });\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Returns a modified PDF document with form fields marked with a green border, and hover text showing the field name.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async mark(\n        file: File | fs.ReadStream,\n        request: Fileforge.pdf.FormMarkRequest,\n        requestOptions?: Form.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/form/mark/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Returns a modified PDF document with filled form fields. A subset of fields can be filled.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async fill(\n        file: File | fs.ReadStream,\n        request: Fileforge.pdf.FormFillRequest,\n        requestOptions?: Form.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/form/fill/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    protected async _getCustomAuthorizationHeaders() {\n        const apiKeyValue = await core.Supplier.get(this._options.apiKey);\n        return { \"X-API-Key\": apiKeyValue };\n    }\n}\n", "import { Readable } from \"node:stream\";\nimport { FileforgeClient as InternalClient } from \"./codegen\";\nexport { Fileforge } from \"./codegen\";\nimport { Pdf as CodegenPDF } from \"./codegen/api/resources/pdf/client/Client\";\nimport { File } from \"formdata-node\";\n\nexport class Pdf extends CodegenPDF {\n  public async generate<Options extends Parameters<CodegenPDF[\"generate\"]>[1]>(\n    files: Parameters<CodegenPDF[\"generate\"]>[0] | string,\n    options: Options,\n    request?: Parameters<CodegenPDF[\"generate\"]>[2],\n  ): Promise<\n    Options extends { options: { host: true } }\n      ? {\n          url: string;\n        }\n      : Awaited<ReturnType<CodegenPDF[\"generate\"]>>\n  > {\n    let parsedFiles = files;\n\n    if (typeof files === \"string\") {\n      parsedFiles = [\n        new File([files], \"index.html\", {\n          type: \"text/html\",\n        }),\n      ];\n    }\n\n    const params = [\n      parsedFiles as Parameters<CodegenPDF[\"generate\"]>[0],\n      options,\n      request,\n    ] as const;\n\n    const responseStream = (await super.generate(...params)) as\n      | Readable\n      | ReadableStream<Uint8Array>;\n\n    switch (options.options?.host) {\n      case true:\n        if (responseStream instanceof ReadableStream) {\n          // @ts-expect-error\n          return (await new Response(responseStream).json()) as {\n            url: string;\n          };\n        } else {\n          // @ts-expect-error\n          return JSON.parse(Buffer.concat(await responseStream.toArray())) as {\n            url: string;\n          };\n        }\n      default:\n        // @ts-expect-error\n        return responseStream as Awaited<ReturnType<CodegenPDF[\"generate\"]>>;\n    }\n  }\n}\n\nexport class FileforgeClient extends InternalClient {\n  public get pdf(): Pdf {\n    // @ts-expect-error\n    return (this._pdf ??= new Pdf(this._options));\n  }\n}\n"],
  "mappings": "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",
  "names": ["compactQueue", "arrayToObject", "merge", "encode", "compact", "isRegExp", "isBuffer", "combine", "maybeMap", "isNonNullishPrimitive", "stringify", "value", "normalizeStringifyOptions", "normalizeParseOptions", "_a", "qs", "body", "import_url_join", "pdf_exports", "FormDetectResponseItemIsEditableType", "FormFillRequestOptionsFieldsItemTwoType", "form_exports", "form_exports", "FormDetectResponseItemIsEditableType", "FormFillRequestOptionsFieldsItemTwoType", "FormDetectResponseItemIsEditableType", "FormDetectResponseItemIsEditableType", "FormFillRequestOptionsFieldsItemTwoType", "FormFillRequestOptionsFieldsItemTwoType", "Response", "Response", "import_url_join", "urlJoin", "pdf_exports", "urlJoin", "urlJoin", "Pdf", "_a", "FileforgeClient"]
}
