"use strict";
/**
 * @vitest-environment node
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const client_1 = require("@/client");
const fs = __importStar(require("node:fs"));
const node_stream_1 = __importStar(require("node:stream"));
const file_from_path_1 = require("formdata-node/file-from-path");
const api_1 = require("@/client/codegen/api");
const NODE_VERSION = parseInt(process.versions.node.split(".")[0]);
(0, vitest_1.describe)("node", () => {
    (0, vitest_1.it)("should work with staging", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
            environment: "https://api.staging.Fileforge.com",
        });
        await ff.getStatus();
    });
    (0, vitest_1.it)("should work with prod", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        await ff.getStatus();
    });
    (0, vitest_1.it)("should throw verbose errors", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: "invalid",
        });
        try {
            await ff.pdf.generate([
                await (0, file_from_path_1.fileFromPath)(__dirname + "/samples/index.html", "index.html", {
                    type: "text/html",
                }),
            ], {
                options: { host: true },
            });
        }
        catch (e) {
            (0, vitest_1.expect)(e).toBeInstanceOf(api_1.UnauthorizedError);
        }
        const authentifiedFf = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        try {
            await authentifiedFf.pdf.generate([
                await (0, file_from_path_1.fileFromPath)(__dirname + "/samples/index.html", "doc.html", {
                    type: "text/html",
                }),
            ], {
                options: { host: true },
            });
        }
        catch (e) {
            (0, vitest_1.expect)(e).toBeInstanceOf(api_1.BadRequestError);
        }
    });
    vitest_1.it.skipIf(NODE_VERSION >= 20)("should work with node < 20", () => {
        // Ensure that File is not available in the global scope
        (0, vitest_1.expect)(global.File).toBeUndefined();
        (0, vitest_1.expect)(new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        })).toBeInstanceOf(client_1.FileforgeClient);
    });
    vitest_1.it.skipIf(NODE_VERSION < 20)("should work with node >= 20", () => {
        // Ensure that File is available in the global scope
        (0, vitest_1.expect)(global.File).toBeDefined();
        (0, vitest_1.expect)(new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        })).toBeInstanceOf(client_1.FileforgeClient);
    });
    vitest_1.it.skipIf(NODE_VERSION < 20)("should take File", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        const response = await ff.pdf.form.mark(new File([fs.readFileSync(__dirname + "/samples/form.pdf")], "form.pdf", {
            type: "application/pdf",
        }), { options: {} });
        (0, vitest_1.expect)(response).toBeInstanceOf(node_stream_1.default.Readable);
    });
    (0, vitest_1.it)("should take File polyfill", async () => {
        // Use a polyfill for File. This allows the user to pass a file name
        const { File } = await import("@web-std/file");
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        await ff.pdf.form.mark(new File([fs.readFileSync(__dirname + "/samples/form.pdf")], "form-polyfilled.pdf", {
            type: "application/pdf",
        }), { options: {} });
    });
    (0, vitest_1.it)("should take fs.createReadStream", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        await ff.pdf.form.mark(fs.createReadStream(__dirname + "/samples/form.pdf"), {});
    });
    (0, vitest_1.it)("should take multiple fs.createReadStream", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        await ff.pdf.merge([
            fs.createReadStream(__dirname + "/samples/form.pdf"),
            fs.createReadStream(__dirname + "/samples/form.pdf"),
        ], {});
    });
    vitest_1.it.skipIf(NODE_VERSION < 20)("should work with generation", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        const document = await ff.pdf.generate([
            new File(["<!doctype html><html><body><h1>Hello world</h1></body></html>"], "index.html", {
                type: "text/html",
            }),
        ], {
            options: {
                host: true,
            },
        });
        (0, vitest_1.expect)(document.url).toBeDefined();
    });
    vitest_1.it.skipIf(NODE_VERSION < 20)("should work with generation without host", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        const document = await ff.pdf.generate([
            new File(["<!doctype html><html><body><h1>Hello world</h1></body></html>"], "index.html", {
                type: "text/html",
            }),
        ], { options: {} });
        (0, vitest_1.expect)(document).toBeDefined();
    });
    (0, vitest_1.it)("should decode file in generate", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        const file = await ff.pdf.generate([
            await (0, file_from_path_1.fileFromPath)(__dirname + "/samples/index.html", "index.html", {
                type: "text/html",
            }),
        ], {});
        (0, vitest_1.expect)(file).toBeInstanceOf(node_stream_1.Readable);
    });
    (0, vitest_1.it)("should create index from string", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        const file = await ff.pdf.generate("<!doctype text><html><body><h1>Hello world</h1></body></html>", {});
        (0, vitest_1.expect)(file).toBeInstanceOf(node_stream_1.Readable);
    });
    (0, vitest_1.it)("should decode json in generate", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        const { url } = await ff.pdf.generate([
            await (0, file_from_path_1.fileFromPath)(__dirname + "/samples/index.html", "index.html", {
                type: "text/html",
            }),
        ], {
            options: { host: true },
        });
        (0, vitest_1.expect)(url).toBeDefined();
    });
});
//# sourceMappingURL=node.test.js.map