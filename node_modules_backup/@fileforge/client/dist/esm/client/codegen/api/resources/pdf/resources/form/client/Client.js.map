{"version":3,"file":"Client.js","sourceRoot":"/","sources":["client/codegen/api/resources/pdf/resources/form/client/Client.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as environments from \"../../../../../../environments\";\nimport * as core from \"../../../../../../core\";\nimport * as fs from \"fs\";\nimport * as Fileforge from \"../../../../../index\";\nimport urlJoin from \"url-join\";\nimport * as serializers from \"../../../../../../serialization/index\";\nimport * as errors from \"../../../../../../errors/index\";\nimport * as stream from \"stream\";\n\nexport declare namespace Form {\n    interface Options {\n        environment?: core.Supplier<environments.FileforgeEnvironment | string>;\n        apiKey?: core.Supplier<string | undefined>;\n    }\n\n    interface RequestOptions {\n        timeoutInSeconds?: number;\n        maxRetries?: number;\n        abortSignal?: AbortSignal;\n    }\n}\n\nexport class Form {\n    constructor(protected readonly _options: Form.Options = {}) {}\n\n    /**\n     * Returns a list of form fields detected in the PDF document, along with their location, options and requirements. For a more visual representation, use the /pdf/form/mark endpoint.\n     *\n     * @param {File | fs.ReadStream} file\n     * @param {Fileforge.pdf.FormDetectRequest} request\n     * @param {Form.RequestOptions} requestOptions - Request-specific configuration.\n     *\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     *\n     * @example\n     *     await fileforge.pdf.form.detect(fs.createReadStream(\"/path/to/your/file\"), {})\n     */\n    public async detect(\n        file: File | fs.ReadStream,\n        request: Fileforge.pdf.FormDetectRequest,\n        requestOptions?: Form.RequestOptions\n    ): Promise<Fileforge.pdf.FormDetectResponseItem[]> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/form/detect/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return await serializers.pdf.form.detect.Response.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: \"passthrough\",\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: [\"response\"],\n            });\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Returns a modified PDF document with form fields marked with a green border, and hover text showing the field name.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async mark(\n        file: File | fs.ReadStream,\n        request: Fileforge.pdf.FormMarkRequest,\n        requestOptions?: Form.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/form/mark/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Returns a modified PDF document with filled form fields. A subset of fields can be filled.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async fill(\n        file: File | fs.ReadStream,\n        request: Fileforge.pdf.FormFillRequest,\n        requestOptions?: Form.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/form/fill/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    protected async _getCustomAuthorizationHeaders() {\n        const apiKeyValue = await core.Supplier.get(this._options.apiKey);\n        return { \"X-API-Key\": apiKeyValue };\n    }\n}\n"]}