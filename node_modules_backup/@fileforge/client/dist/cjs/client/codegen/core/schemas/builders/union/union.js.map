{"version":3,"file":"union.js","sourceRoot":"/","sources":["client/codegen/core/schemas/builders/union/union.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseSchema, MaybeValid, SchemaType } from \"../../Schema\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\nimport { isPlainObject } from \"../../utils/isPlainObject\";\nimport { keys } from \"../../utils/keys\";\nimport { MaybePromise } from \"../../utils/MaybePromise\";\nimport { maybeSkipValidation } from \"../../utils/maybeSkipValidation\";\nimport { enum_ } from \"../enum\";\nimport { ObjectSchema } from \"../object\";\nimport { getObjectLikeUtils, ObjectLikeSchema } from \"../object-like\";\nimport { getSchemaUtils } from \"../schema-utils\";\nimport { Discriminant } from \"./discriminant\";\nimport { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from \"./types\";\n\nexport function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(\n    discriminant: D,\n    union: U\n): ObjectLikeSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>> {\n    const rawDiscriminant =\n        typeof discriminant === \"string\" ? discriminant : (discriminant.rawDiscriminant as inferRawDiscriminant<D>);\n    const parsedDiscriminant =\n        typeof discriminant === \"string\"\n            ? discriminant\n            : (discriminant.parsedDiscriminant as inferParsedDiscriminant<D>);\n\n    const discriminantValueSchema = enum_(keys(union) as string[]);\n\n    const baseSchema: BaseSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>> = {\n        parse: async (raw, opts) => {\n            return transformAndValidateUnion({\n                value: raw,\n                discriminant: rawDiscriminant,\n                transformedDiscriminant: parsedDiscriminant,\n                transformDiscriminantValue: (discriminantValue) =>\n                    discriminantValueSchema.parse(discriminantValue, {\n                        allowUnrecognizedEnumValues: opts?.allowUnrecognizedUnionMembers,\n                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), rawDiscriminant],\n                    }),\n                getAdditionalPropertiesSchema: (discriminantValue) => union[discriminantValue],\n                allowUnrecognizedUnionMembers: opts?.allowUnrecognizedUnionMembers,\n                transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) =>\n                    additionalPropertiesSchema.parse(additionalProperties, opts),\n                breadcrumbsPrefix: opts?.breadcrumbsPrefix,\n            });\n        },\n        json: async (parsed, opts) => {\n            return transformAndValidateUnion({\n                value: parsed,\n                discriminant: parsedDiscriminant,\n                transformedDiscriminant: rawDiscriminant,\n                transformDiscriminantValue: (discriminantValue) =>\n                    discriminantValueSchema.json(discriminantValue, {\n                        allowUnrecognizedEnumValues: opts?.allowUnrecognizedUnionMembers,\n                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), parsedDiscriminant],\n                    }),\n                getAdditionalPropertiesSchema: (discriminantValue) => union[discriminantValue],\n                allowUnrecognizedUnionMembers: opts?.allowUnrecognizedUnionMembers,\n                transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) =>\n                    additionalPropertiesSchema.json(additionalProperties, opts),\n                breadcrumbsPrefix: opts?.breadcrumbsPrefix,\n            });\n        },\n        getType: () => SchemaType.UNION,\n    };\n\n    return {\n        ...maybeSkipValidation(baseSchema),\n        ...getSchemaUtils(baseSchema),\n        ...getObjectLikeUtils(baseSchema),\n    };\n}\n\nasync function transformAndValidateUnion<\n    TransformedDiscriminant extends string,\n    TransformedDiscriminantValue extends string,\n    TransformedAdditionalProperties\n>({\n    value,\n    discriminant,\n    transformedDiscriminant,\n    transformDiscriminantValue,\n    getAdditionalPropertiesSchema,\n    allowUnrecognizedUnionMembers = false,\n    transformAdditionalProperties,\n    breadcrumbsPrefix = [],\n}: {\n    value: unknown;\n    discriminant: string;\n    transformedDiscriminant: TransformedDiscriminant;\n    transformDiscriminantValue: (discriminantValue: unknown) => MaybePromise<MaybeValid<TransformedDiscriminantValue>>;\n    getAdditionalPropertiesSchema: (discriminantValue: string) => ObjectSchema<any, any> | undefined;\n    allowUnrecognizedUnionMembers: boolean | undefined;\n    transformAdditionalProperties: (\n        additionalProperties: unknown,\n        additionalPropertiesSchema: ObjectSchema<any, any>\n    ) => MaybePromise<MaybeValid<TransformedAdditionalProperties>>;\n    breadcrumbsPrefix: string[] | undefined;\n}): Promise<\n    MaybeValid<Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties>\n> {\n    if (!isPlainObject(value)) {\n        return {\n            ok: false,\n            errors: [\n                {\n                    path: breadcrumbsPrefix,\n                    message: getErrorMessageForIncorrectType(value, \"object\"),\n                },\n            ],\n        };\n    }\n\n    const { [discriminant]: discriminantValue, ...additionalProperties } = value;\n\n    if (discriminantValue == null) {\n        return {\n            ok: false,\n            errors: [\n                {\n                    path: breadcrumbsPrefix,\n                    message: `Missing discriminant (\"${discriminant}\")`,\n                },\n            ],\n        };\n    }\n\n    const transformedDiscriminantValue = await transformDiscriminantValue(discriminantValue);\n    if (!transformedDiscriminantValue.ok) {\n        return {\n            ok: false,\n            errors: transformedDiscriminantValue.errors,\n        };\n    }\n\n    const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);\n\n    if (additionalPropertiesSchema == null) {\n        if (allowUnrecognizedUnionMembers) {\n            return {\n                ok: true,\n                value: {\n                    [transformedDiscriminant]: transformedDiscriminantValue.value,\n                    ...additionalProperties,\n                } as Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties,\n            };\n        } else {\n            return {\n                ok: false,\n                errors: [\n                    {\n                        path: [...breadcrumbsPrefix, discriminant],\n                        message: \"Unexpected discriminant value\",\n                    },\n                ],\n            };\n        }\n    }\n\n    const transformedAdditionalProperties = await transformAdditionalProperties(\n        additionalProperties,\n        additionalPropertiesSchema\n    );\n    if (!transformedAdditionalProperties.ok) {\n        return transformedAdditionalProperties;\n    }\n\n    return {\n        ok: true,\n        value: {\n            [transformedDiscriminant]: discriminantValue,\n            ...transformedAdditionalProperties.value,\n        } as Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties,\n    };\n}\n"]}