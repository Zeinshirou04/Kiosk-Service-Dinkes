"use strict";
/**
 * @vitest-environment jsdom
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const client_1 = require("@/client");
const file_from_path_1 = require("formdata-node/file-from-path");
const process = {
    env: {
        FILEFORGE_API_KEY: "1466ffcd-95d0-4c84-9ebd-cb0997d4c31c",
    },
};
(0, vitest_1.describe)("browser", () => {
    (0, vitest_1.it)("should work", () => {
        // Ensure that File is not available in the global scope
        (0, vitest_1.expect)(global.File).toBeDefined();
        (0, vitest_1.expect)(new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        })).toBeInstanceOf(client_1.FileforgeClient);
    });
    vitest_1.it.skip("should accept file", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        await ff.pdf.form.mark(await (0, file_from_path_1.fileFromPath)(__dirname + "/samples/form.pdf"), {});
    });
    (0, vitest_1.it)("should decode file in generate", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        const file = await ff.pdf.generate([
            await (0, file_from_path_1.fileFromPath)(__dirname + "/samples/index.html", "index.html", {
                type: "text/html",
            }),
        ], {});
        (0, vitest_1.expect)(file).toBeInstanceOf(ReadableStream);
    }, 30000);
    (0, vitest_1.it)("should decode json in generate", async () => {
        const ff = new client_1.FileforgeClient({
            apiKey: process.env.FILEFORGE_API_KEY,
        });
        const { url } = await ff.pdf.generate([
            await (0, file_from_path_1.fileFromPath)(__dirname + "/samples/index.html", "index.html", {
                type: "text/html",
            }),
        ], {
            options: { host: true },
        });
        (0, vitest_1.expect)(url).toBeDefined();
    });
});
//# sourceMappingURL=browser.test.js.map