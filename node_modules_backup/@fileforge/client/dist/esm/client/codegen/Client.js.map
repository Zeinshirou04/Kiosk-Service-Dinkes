{"version":3,"file":"Client.js","sourceRoot":"/","sources":["client/codegen/Client.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as environments from \"./environments\";\nimport * as core from \"./core\";\nimport * as Fileforge from \"./api/index\";\nimport urlJoin from \"url-join\";\nimport * as serializers from \"./serialization/index\";\nimport * as errors from \"./errors/index\";\nimport { Pdf } from \"./api/resources/pdf/client/Client\";\n\nexport declare namespace FileforgeClient {\n    interface Options {\n        environment?: core.Supplier<environments.FileforgeEnvironment | string>;\n        apiKey?: core.Supplier<string | undefined>;\n    }\n\n    interface RequestOptions {\n        timeoutInSeconds?: number;\n        maxRetries?: number;\n        abortSignal?: AbortSignal;\n    }\n}\n\nexport class FileforgeClient {\n    constructor(protected readonly _options: FileforgeClient.Options = {}) {}\n\n    /**\n     * Get the status of the API\n     *\n     * @param {FileforgeClient.RequestOptions} requestOptions - Request-specific configuration.\n     *\n     * @example\n     *     await fileforge.getStatus()\n     */\n    public async getStatus(requestOptions?: FileforgeClient.RequestOptions): Promise<Fileforge.GetStatusResponse> {\n        const _response = await core.fetcher({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"status/\"\n            ),\n            method: \"GET\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n            },\n            contentType: \"application/json\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return await serializers.GetStatusResponse.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: \"passthrough\",\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: [\"response\"],\n            });\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            throw new errors.FileforgeError({\n                statusCode: _response.error.statusCode,\n                body: _response.error.body,\n            });\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    protected _pdf: Pdf | undefined;\n\n    public get pdf(): Pdf {\n        return (this._pdf ??= new Pdf(this._options));\n    }\n\n    protected async _getCustomAuthorizationHeaders() {\n        const apiKeyValue = await core.Supplier.get(this._options.apiKey);\n        return { \"X-API-Key\": apiKeyValue };\n    }\n}\n"]}