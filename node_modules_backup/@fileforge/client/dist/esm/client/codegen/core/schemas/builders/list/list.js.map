{"version":3,"file":"list.js","sourceRoot":"/","sources":["client/codegen/core/schemas/builders/list/list.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkC,UAAU,EAAmB,MAAM,cAAc,CAAC;AAC3F,OAAO,EAAE,+BAA+B,EAAE,MAAM,6CAA6C,CAAC;AAE9F,OAAO,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AACtE,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAEjD,MAAM,UAAU,IAAI,CAAc,MAA2B;IACzD,MAAM,UAAU,GAAgC;QAC5C,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,CACvB,yBAAyB,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAC3C,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE;YACf,GAAG,IAAI;YACP,iBAAiB,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,iBAAiB,IAAI,EAAE,CAAC,EAAE,IAAI,KAAK,GAAG,CAAC;SACxE,CAAC,CACL;QACL,IAAI,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CACnB,yBAAyB,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAC9C,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,GAAG,IAAI;YACP,iBAAiB,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,iBAAiB,IAAI,EAAE,CAAC,EAAE,IAAI,KAAK,GAAG,CAAC;SACxE,CAAC,CACL;QACL,OAAO,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI;KACjC,CAAC;IAEF,OAAO;QACH,GAAG,mBAAmB,CAAC,UAAU,CAAC;QAClC,GAAG,cAAc,CAAC,UAAU,CAAC;KAChC,CAAC;AACN,CAAC;AAED,KAAK,UAAU,yBAAyB,CACpC,KAAc,EACd,aAA6E;IAE7E,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QACxB,OAAO;YACH,EAAE,EAAE,KAAK;YACT,MAAM,EAAE;gBACJ;oBACI,OAAO,EAAE,+BAA+B,CAAC,KAAK,EAAE,MAAM,CAAC;oBACvD,IAAI,EAAE,EAAE;iBACX;aACJ;SACJ,CAAC;IACN,CAAC;IAED,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IAElG,OAAO,eAAe,CAAC,MAAM,CACzB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QACV,IAAI,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;YACpB,OAAO;gBACH,EAAE,EAAE,IAAI;gBACR,KAAK,EAAE,CAAC,GAAG,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC;aACpC,CAAC;QACN,CAAC;QAED,MAAM,MAAM,GAAsB,EAAE,CAAC;QACrC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;YACV,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;YACX,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC;QAED,OAAO;YACH,EAAE,EAAE,KAAK;YACT,MAAM;SACT,CAAC;IACN,CAAC,EACD,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,CAC1B,CAAC;AACN,CAAC","sourcesContent":["import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from \"../../Schema\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\nimport { MaybePromise } from \"../../utils/MaybePromise\";\nimport { maybeSkipValidation } from \"../../utils/maybeSkipValidation\";\nimport { getSchemaUtils } from \"../schema-utils\";\n\nexport function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {\n    const baseSchema: BaseSchema<Raw[], Parsed[]> = {\n        parse: async (raw, opts) =>\n            validateAndTransformArray(raw, (item, index) =>\n                schema.parse(item, {\n                    ...opts,\n                    breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), `[${index}]`],\n                })\n            ),\n        json: (parsed, opts) =>\n            validateAndTransformArray(parsed, (item, index) =>\n                schema.json(item, {\n                    ...opts,\n                    breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), `[${index}]`],\n                })\n            ),\n        getType: () => SchemaType.LIST,\n    };\n\n    return {\n        ...maybeSkipValidation(baseSchema),\n        ...getSchemaUtils(baseSchema),\n    };\n}\n\nasync function validateAndTransformArray<Raw, Parsed>(\n    value: unknown,\n    transformItem: (item: Raw, index: number) => MaybePromise<MaybeValid<Parsed>>\n): Promise<MaybeValid<Parsed[]>> {\n    if (!Array.isArray(value)) {\n        return {\n            ok: false,\n            errors: [\n                {\n                    message: getErrorMessageForIncorrectType(value, \"list\"),\n                    path: [],\n                },\n            ],\n        };\n    }\n\n    const maybeValidItems = await Promise.all(value.map((item, index) => transformItem(item, index)));\n\n    return maybeValidItems.reduce<MaybeValid<Parsed[]>>(\n        (acc, item) => {\n            if (acc.ok && item.ok) {\n                return {\n                    ok: true,\n                    value: [...acc.value, item.value],\n                };\n            }\n\n            const errors: ValidationError[] = [];\n            if (!acc.ok) {\n                errors.push(...acc.errors);\n            }\n            if (!item.ok) {\n                errors.push(...item.errors);\n            }\n\n            return {\n                ok: false,\n                errors,\n            };\n        },\n        { ok: true, value: [] }\n    );\n}\n"]}