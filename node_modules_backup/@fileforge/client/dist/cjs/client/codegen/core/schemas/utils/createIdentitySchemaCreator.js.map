{"version":3,"file":"createIdentitySchemaCreator.js","sourceRoot":"/","sources":["client/codegen/core/schemas/utils/createIdentitySchemaCreator.ts"],"names":[],"mappings":";AAAA,cAAc;;;AAEV,2DAA0D;AAE9D,+DAA4D;AAE5D,SAAgB,2BAA2B,CACvC,UAAsB,EACtB,QAAiE;IAEjE,OAAO,GAAG,EAAE;QACR,MAAM,UAAU,GAAqB;YACjC,KAAK,EAAE,QAAQ;YACf,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,GAAG,EAAE,CAAC,UAAU;SAC5B,CAAC;QAEF,OAAO;YACH,GAAG,IAAA,yCAAmB,EAAC,UAAU,CAAC;YAClC,GAAG,IAAA,6BAAc,EAAC,UAAU,CAAC;SAChC,CAAC;IACN,CAAC,CAAC;AACN,CAAC;AAhBD,kEAgBC","sourcesContent":["// @ts-nocheck\n\n    import { getSchemaUtils } from \"../builders/schema-utils\";\nimport { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from \"../Schema\";\nimport { maybeSkipValidation } from \"./maybeSkipValidation\";\n\nexport function createIdentitySchemaCreator<T>(\n    schemaType: SchemaType,\n    validate: (value: unknown, opts?: SchemaOptions) => MaybeValid<T>\n): () => Schema<T, T> {\n    return () => {\n        const baseSchema: BaseSchema<T, T> = {\n            parse: validate,\n            json: validate,\n            getType: () => schemaType,\n        };\n\n        return {\n            ...maybeSkipValidation(baseSchema),\n            ...getSchemaUtils(baseSchema),\n        };\n    };\n}\n"]}