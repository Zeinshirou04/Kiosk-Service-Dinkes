{"version":3,"file":"browser.test.js","sourceRoot":"/","sources":["test/browser.test.ts"],"names":[],"mappings":"AAAA;;GAEG;AAEH,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAC9C,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAC3C,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAE5D,MAAM,OAAO,GAAG;IACd,GAAG,EAAE;QACH,iBAAiB,EAAE,sCAAsC;KAC1D;CACF,CAAC;AAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;QACrB,wDAAwD;QACxD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QAElC,MAAM,CACJ,IAAI,eAAe,CAAC;YAClB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB;SACtC,CAAC,CACH,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,EAAE,GAAG,IAAI,eAAe,CAAC;YAC7B,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB;SACtC,CAAC,CAAC;QAEH,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CACpB,MAAM,YAAY,CAAC,SAAS,GAAG,mBAAmB,CAAC,EACnD,EAAE,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,EAAE,GAAG,IAAI,eAAe,CAAC;YAC7B,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB;SACtC,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,CAChC;YACE,MAAM,YAAY,CAAC,SAAS,GAAG,qBAAqB,EAAE,YAAY,EAAE;gBAClE,IAAI,EAAE,WAAW;aAClB,CAAC;SACH,EACD,EAAE,CACH,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;IAC9C,CAAC,EAAE,KAAK,CAAC,CAAC;IAEV,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,EAAE,GAAG,IAAI,eAAe,CAAC;YAC7B,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB;SACtC,CAAC,CAAC;QAEH,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,CACnC;YACE,MAAM,YAAY,CAAC,SAAS,GAAG,qBAAqB,EAAE,YAAY,EAAE;gBAClE,IAAI,EAAE,WAAW;aAClB,CAAC;SACH,EACD;YACE,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;SACxB,CACF,CAAC;QAEF,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @vitest-environment jsdom\n */\n\nimport { describe, it, expect } from \"vitest\";\nimport { FileforgeClient } from \"@/client\";\nimport { fileFromPath } from \"formdata-node/file-from-path\";\n\nconst process = {\n  env: {\n    FILEFORGE_API_KEY: \"1466ffcd-95d0-4c84-9ebd-cb0997d4c31c\",\n  },\n};\n\ndescribe(\"browser\", () => {\n  it(\"should work\", () => {\n    // Ensure that File is not available in the global scope\n    expect(global.File).toBeDefined();\n\n    expect(\n      new FileforgeClient({\n        apiKey: process.env.FILEFORGE_API_KEY,\n      }),\n    ).toBeInstanceOf(FileforgeClient);\n  });\n\n  it.skip(\"should accept file\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    await ff.pdf.form.mark(\n      await fileFromPath(__dirname + \"/samples/form.pdf\"),\n      {},\n    );\n  });\n\n  it(\"should decode file in generate\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    const file = await ff.pdf.generate(\n      [\n        await fileFromPath(__dirname + \"/samples/index.html\", \"index.html\", {\n          type: \"text/html\",\n        }),\n      ],\n      {},\n    );\n\n    expect(file).toBeInstanceOf(ReadableStream);\n  }, 30000);\n\n  it(\"should decode json in generate\", async () => {\n    const ff = new FileforgeClient({\n      apiKey: process.env.FILEFORGE_API_KEY,\n    });\n\n    const { url } = await ff.pdf.generate(\n      [\n        await fileFromPath(__dirname + \"/samples/index.html\", \"index.html\", {\n          type: \"text/html\",\n        }),\n      ],\n      {\n        options: { host: true },\n      },\n    );\n\n    expect(url).toBeDefined();\n  });\n});\n"]}