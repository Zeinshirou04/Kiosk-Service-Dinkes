{"version":3,"file":"date.js","sourceRoot":"/","sources":["client/codegen/core/schemas/builders/date/date.ts"],"names":[],"mappings":"AAAA,OAAO,EAAsB,UAAU,EAAE,MAAM,cAAc,CAAC;AAC9D,OAAO,EAAE,+BAA+B,EAAE,MAAM,6CAA6C,CAAC;AAC9F,OAAO,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AACtE,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAEjD,oFAAoF;AACpF,MAAM,cAAc,GAChB,wRAAwR,CAAC;AAE7R,MAAM,UAAU,IAAI;IAChB,MAAM,UAAU,GAA6B;QACzC,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE,iBAAiB,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE;YAC5C,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;gBAC1B,OAAO;oBACH,EAAE,EAAE,KAAK;oBACT,MAAM,EAAE;wBACJ;4BACI,IAAI,EAAE,iBAAiB;4BACvB,OAAO,EAAE,+BAA+B,CAAC,GAAG,EAAE,QAAQ,CAAC;yBAC1D;qBACJ;iBACJ,CAAC;YACN,CAAC;YACD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC5B,OAAO;oBACH,EAAE,EAAE,KAAK;oBACT,MAAM,EAAE;wBACJ;4BACI,IAAI,EAAE,iBAAiB;4BACvB,OAAO,EAAE,+BAA+B,CAAC,GAAG,EAAE,sBAAsB,CAAC;yBACxE;qBACJ;iBACJ,CAAC;YACN,CAAC;YACD,OAAO;gBACH,EAAE,EAAE,IAAI;gBACR,KAAK,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC;aACvB,CAAC;QACN,CAAC;QACD,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,iBAAiB,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE;YAC5C,IAAI,IAAI,YAAY,IAAI,EAAE,CAAC;gBACvB,OAAO;oBACH,EAAE,EAAE,IAAI;oBACR,KAAK,EAAE,IAAI,CAAC,WAAW,EAAE;iBAC5B,CAAC;YACN,CAAC;iBAAM,CAAC;gBACJ,OAAO;oBACH,EAAE,EAAE,KAAK;oBACT,MAAM,EAAE;wBACJ;4BACI,IAAI,EAAE,iBAAiB;4BACvB,OAAO,EAAE,+BAA+B,CAAC,IAAI,EAAE,aAAa,CAAC;yBAChE;qBACJ;iBACJ,CAAC;YACN,CAAC;QACL,CAAC;QACD,OAAO,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI;KACjC,CAAC;IAEF,OAAO;QACH,GAAG,mBAAmB,CAAC,UAAU,CAAC;QAClC,GAAG,cAAc,CAAC,UAAU,CAAC;KAChC,CAAC;AACN,CAAC","sourcesContent":["import { BaseSchema, Schema, SchemaType } from \"../../Schema\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\nimport { maybeSkipValidation } from \"../../utils/maybeSkipValidation\";\nimport { getSchemaUtils } from \"../schema-utils\";\n\n// https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime\nconst ISO_8601_REGEX =\n    /^([+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24:?00)([.,]\\d+(?!:))?)?(\\17[0-5]\\d([.,]\\d+)?)?([zZ]|([+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n\nexport function date(): Schema<string, Date> {\n    const baseSchema: BaseSchema<string, Date> = {\n        parse: (raw, { breadcrumbsPrefix = [] } = {}) => {\n            if (typeof raw !== \"string\") {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: breadcrumbsPrefix,\n                            message: getErrorMessageForIncorrectType(raw, \"string\"),\n                        },\n                    ],\n                };\n            }\n            if (!ISO_8601_REGEX.test(raw)) {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: breadcrumbsPrefix,\n                            message: getErrorMessageForIncorrectType(raw, \"ISO 8601 date string\"),\n                        },\n                    ],\n                };\n            }\n            return {\n                ok: true,\n                value: new Date(raw),\n            };\n        },\n        json: (date, { breadcrumbsPrefix = [] } = {}) => {\n            if (date instanceof Date) {\n                return {\n                    ok: true,\n                    value: date.toISOString(),\n                };\n            } else {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: breadcrumbsPrefix,\n                            message: getErrorMessageForIncorrectType(date, \"Date object\"),\n                        },\n                    ],\n                };\n            }\n        },\n        getType: () => SchemaType.DATE,\n    };\n\n    return {\n        ...maybeSkipValidation(baseSchema),\n        ...getSchemaUtils(baseSchema),\n    };\n}\n"]}