/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as fs from "fs";
import * as Fileforge from "../../../index";
import * as stream from "stream";
import { Form } from "../resources/form/client/Client";
export declare namespace Pdf {
    interface Options {
        environment?: core.Supplier<environments.FileforgeEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}
/**
 * PDF operations
 */
export declare class Pdf {
    protected readonly _options: Pdf.Options;
    constructor(_options?: Pdf.Options);
    /**
     * Converts a Microsoft Word document (.DOCX or .DOC) file to a PDF document.
     *
     * This service uses a LibreOffice headless server to perform the conversion, and may not support all features of the original document.
     *
     * **Known discrepancies**
     *
     * - Some fonts may not be available in the server, and may be substituted by a closest match.
     * - Some complex formatting may not be preserved, such as background graphics.
     *
     * **Variables**
     *
     * Variable replacement is supported with various methods:
     *
     * - Templated litterals: `{{name}}`
     * - Word variables, as listed in the document metadata: `{DOCVARIABLE "name"}`
     *
     * To enable variable replacement as Word variables for your account, please contact the FileForge support.
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     */
    fromDocx(file: File | fs.ReadStream, request: Fileforge.PdfFromDocxRequest, requestOptions?: Pdf.RequestOptions): Promise<stream.Readable>;
    /**
     * Generates a PDF document from web assets.
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     * @throws {@link Fileforge.BadGatewayError}
     */
    generate(files: File[] | fs.ReadStream[], request: Fileforge.PdfGenerateRequest, requestOptions?: Pdf.RequestOptions): Promise<stream.Readable>;
    /**
     * Merges multiple PDF documents into a single PDF document.
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     */
    merge(files: File[] | fs.ReadStream[], request: Fileforge.PdfMergeRequest, requestOptions?: Pdf.RequestOptions): Promise<stream.Readable>;
    /**
     * Splits a PDF document into 2 PDF documents. Returns a zip file containing the 2 documents. Each document is named after the original document with a suffix added to indicate the range of pages it contains.
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     */
    split(file: File | fs.ReadStream, request: Fileforge.PdfSplitRequest, requestOptions?: Pdf.RequestOptions): Promise<stream.Readable>;
    /**
     * Extracts a range of pages from a PDF document. The start and end pages are included in the extracted document. The extracted document is named after the original document with a suffix added to indicate the range of pages it contains (ex:document_extracted\_\$start\_\$end.pdf).
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     */
    extract(file: File | fs.ReadStream, request: Fileforge.PdfExtractRequest, requestOptions?: Pdf.RequestOptions): Promise<stream.Readable>;
    /**
     * Insert a PDF document into another PDF document at a specified page. The inserted document is named after the original document with a suffix added to indicate the range of pages it contains (ex:document_inserted\_\$insertPage\_\$document2.pdf). Note: The first document is the parent document and the second document is the document to be inserted.
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     */
    insert(files: File[] | fs.ReadStream[], request: Fileforge.PdfInsertRequest, requestOptions?: Pdf.RequestOptions): Promise<stream.Readable>;
    protected _form: Form | undefined;
    get form(): Form;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-API-Key": string | undefined;
    }>;
}
