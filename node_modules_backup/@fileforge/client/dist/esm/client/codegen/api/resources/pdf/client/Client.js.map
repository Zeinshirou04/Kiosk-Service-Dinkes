{"version":3,"file":"Client.js","sourceRoot":"/","sources":["client/codegen/api/resources/pdf/client/Client.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This file was auto-generated by Fern from our API Definition.\n */\n\nimport * as environments from \"../../../../environments\";\nimport * as core from \"../../../../core\";\nimport * as fs from \"fs\";\nimport * as Fileforge from \"../../../index\";\nimport * as stream from \"stream\";\nimport urlJoin from \"url-join\";\nimport * as errors from \"../../../../errors/index\";\nimport * as serializers from \"../../../../serialization/index\";\nimport { Form } from \"../resources/form/client/Client\";\n\nexport declare namespace Pdf {\n    interface Options {\n        environment?: core.Supplier<environments.FileforgeEnvironment | string>;\n        apiKey?: core.Supplier<string | undefined>;\n    }\n\n    interface RequestOptions {\n        timeoutInSeconds?: number;\n        maxRetries?: number;\n        abortSignal?: AbortSignal;\n    }\n}\n\n/**\n * PDF operations\n */\nexport class Pdf {\n    constructor(protected readonly _options: Pdf.Options = {}) {}\n\n    /**\n     * Converts a Microsoft Word document (.DOCX or .DOC) file to a PDF document.\n     *\n     * This service uses a LibreOffice headless server to perform the conversion, and may not support all features of the original document.\n     *\n     * **Known discrepancies**\n     *\n     * - Some fonts may not be available in the server, and may be substituted by a closest match.\n     * - Some complex formatting may not be preserved, such as background graphics.\n     *\n     * **Variables**\n     *\n     * Variable replacement is supported with various methods:\n     *\n     * - Templated litterals: `{{name}}`\n     * - Word variables, as listed in the document metadata: `{DOCVARIABLE \"name\"}`\n     *\n     * To enable variable replacement as Word variables for your account, please contact the FileForge support.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async fromDocx(\n        file: File | fs.ReadStream,\n        request: Fileforge.PdfFromDocxRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/docx/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Generates a PDF document from web assets.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     * @throws {@link Fileforge.BadGatewayError}\n     */\n    public async generate(\n        files: File[] | fs.ReadStream[],\n        request: Fileforge.PdfGenerateRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        for (const _file of files) {\n            await _request.append(\"files\", _file);\n        }\n\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/generate/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                case 502:\n                    throw new Fileforge.BadGatewayError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Merges multiple PDF documents into a single PDF document.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async merge(\n        files: File[] | fs.ReadStream[],\n        request: Fileforge.PdfMergeRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        if (request.options != null) {\n            await _request.append(\"options\", JSON.stringify(request.options));\n        }\n\n        for (const _file of files) {\n            await _request.append(\"files\", _file);\n        }\n\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/merge/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Splits a PDF document into 2 PDF documents. Returns a zip file containing the 2 documents. Each document is named after the original document with a suffix added to indicate the range of pages it contains.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async split(\n        file: File | fs.ReadStream,\n        request: Fileforge.PdfSplitRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        await _request.append(\"options\", JSON.stringify(request.options));\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/split/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Extracts a range of pages from a PDF document. The start and end pages are included in the extracted document. The extracted document is named after the original document with a suffix added to indicate the range of pages it contains (ex:document_extracted\\_\\$start\\_\\$end.pdf).\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async extract(\n        file: File | fs.ReadStream,\n        request: Fileforge.PdfExtractRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        await _request.append(\"options\", JSON.stringify(request.options));\n        await _request.append(\"file\", file);\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/extract/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    /**\n     * Insert a PDF document into another PDF document at a specified page. The inserted document is named after the original document with a suffix added to indicate the range of pages it contains (ex:document_inserted\\_\\$insertPage\\_\\$document2.pdf). Note: The first document is the parent document and the second document is the document to be inserted.\n     * @throws {@link Fileforge.BadRequestError}\n     * @throws {@link Fileforge.UnauthorizedError}\n     * @throws {@link Fileforge.InternalServerError}\n     */\n    public async insert(\n        files: File[] | fs.ReadStream[],\n        request: Fileforge.PdfInsertRequest,\n        requestOptions?: Pdf.RequestOptions\n    ): Promise<stream.Readable> {\n        const _request = new core.FormDataWrapper();\n        await _request.append(\"options\", JSON.stringify(request.options));\n        for (const _file of files) {\n            await _request.append(\"files\", _file);\n        }\n\n        const _maybeEncodedRequest = _request.getRequest();\n        const _response = await core.fetcher<stream.Readable>({\n            url: urlJoin(\n                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,\n                \"pdf/insert/\"\n            ),\n            method: \"POST\",\n            headers: {\n                \"X-Fern-Language\": \"JavaScript\",\n                \"X-Fern-Runtime\": core.RUNTIME.type,\n                \"X-Fern-Runtime-Version\": core.RUNTIME.version,\n                ...(await this._getCustomAuthorizationHeaders()),\n                ...(await _maybeEncodedRequest.getHeaders()),\n            },\n            body: await _maybeEncodedRequest.getBody(),\n            responseType: \"streaming\",\n            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            abortSignal: requestOptions?.abortSignal,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n\n        if (_response.error.reason === \"status-code\") {\n            switch (_response.error.statusCode) {\n                case 400:\n                    throw new Fileforge.BadRequestError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 401:\n                    throw new Fileforge.UnauthorizedError(\n                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        })\n                    );\n                case 500:\n                    throw new Fileforge.InternalServerError(_response.error.body);\n                default:\n                    throw new errors.FileforgeError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n\n        switch (_response.error.reason) {\n            case \"non-json\":\n                throw new errors.FileforgeError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case \"timeout\":\n                throw new errors.FileforgeTimeoutError();\n            case \"unknown\":\n                throw new errors.FileforgeError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n\n    protected _form: Form | undefined;\n\n    public get form(): Form {\n        return (this._form ??= new Form(this._options));\n    }\n\n    protected async _getCustomAuthorizationHeaders() {\n        const apiKeyValue = await core.Supplier.get(this._options.apiKey);\n        return { \"X-API-Key\": apiKeyValue };\n    }\n}\n"]}