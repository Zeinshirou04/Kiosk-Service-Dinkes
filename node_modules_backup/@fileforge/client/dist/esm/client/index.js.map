{"version":3,"file":"index.js","sourceRoot":"/","sources":["client/index.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,IAAI,cAAc,EAAE,MAAM,WAAW,CAAC;AAC9D,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACtC,OAAO,EAAE,GAAG,IAAI,UAAU,EAAE,MAAM,2CAA2C,CAAC;AAC9E,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAErC,MAAM,OAAO,GAAI,SAAQ,UAAU;IAC1B,KAAK,CAAC,QAAQ,CACnB,KAAqD,EACrD,OAAgB,EAChB,OAA+C;QAQ/C,IAAI,WAAW,GAAG,KAAK,CAAC;QAExB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,WAAW,GAAG;gBACZ,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE;oBAC9B,IAAI,EAAE,WAAW;iBAClB,CAAC;aACH,CAAC;QACJ,CAAC;QAED,MAAM,MAAM,GAAG;YACb,WAAoD;YACpD,OAAO;YACP,OAAO;SACC,CAAC;QAEX,MAAM,cAAc,GAAG,CAAC,MAAM,KAAK,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,CAEzB,CAAC;QAE/B,QAAQ,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC;YAC9B,KAAK,IAAI;gBACP,IAAI,cAAc,YAAY,cAAc,EAAE,CAAC;oBAC7C,mBAAmB;oBACnB,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE,CAEhD,CAAC;gBACJ,CAAC;qBAAM,CAAC;oBACN,mBAAmB;oBACnB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,cAAc,CAAC,OAAO,EAAE,CAAC,CAE9D,CAAC;gBACJ,CAAC;YACH;gBACE,mBAAmB;gBACnB,OAAO,cAA6D,CAAC;QACzE,CAAC;IACH,CAAC;CACF;AAED,MAAM,OAAO,eAAgB,SAAQ,cAAc;IACjD,IAAW,GAAG;QACZ,mBAAmB;QACnB,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAChD,CAAC;CACF","sourcesContent":["import { Readable } from \"node:stream\";\nimport { FileforgeClient as InternalClient } from \"./codegen\";\nexport { Fileforge } from \"./codegen\";\nimport { Pdf as CodegenPDF } from \"./codegen/api/resources/pdf/client/Client\";\nimport { File } from \"formdata-node\";\n\nexport class Pdf extends CodegenPDF {\n  public async generate<Options extends Parameters<CodegenPDF[\"generate\"]>[1]>(\n    files: Parameters<CodegenPDF[\"generate\"]>[0] | string,\n    options: Options,\n    request?: Parameters<CodegenPDF[\"generate\"]>[2],\n  ): Promise<\n    Options extends { options: { host: true } }\n      ? {\n          url: string;\n        }\n      : Awaited<ReturnType<CodegenPDF[\"generate\"]>>\n  > {\n    let parsedFiles = files;\n\n    if (typeof files === \"string\") {\n      parsedFiles = [\n        new File([files], \"index.html\", {\n          type: \"text/html\",\n        }),\n      ];\n    }\n\n    const params = [\n      parsedFiles as Parameters<CodegenPDF[\"generate\"]>[0],\n      options,\n      request,\n    ] as const;\n\n    const responseStream = (await super.generate(...params)) as\n      | Readable\n      | ReadableStream<Uint8Array>;\n\n    switch (options.options?.host) {\n      case true:\n        if (responseStream instanceof ReadableStream) {\n          // @ts-expect-error\n          return (await new Response(responseStream).json()) as {\n            url: string;\n          };\n        } else {\n          // @ts-expect-error\n          return JSON.parse(Buffer.concat(await responseStream.toArray())) as {\n            url: string;\n          };\n        }\n      default:\n        // @ts-expect-error\n        return responseStream as Awaited<ReturnType<CodegenPDF[\"generate\"]>>;\n    }\n  }\n}\n\nexport class FileforgeClient extends InternalClient {\n  public get pdf(): Pdf {\n    // @ts-expect-error\n    return (this._pdf ??= new Pdf(this._options));\n  }\n}\n"]}