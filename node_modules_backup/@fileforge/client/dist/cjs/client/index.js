"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileforgeClient = exports.Pdf = exports.Fileforge = void 0;
const codegen_1 = require("./codegen");
var codegen_2 = require("./codegen");
Object.defineProperty(exports, "Fileforge", { enumerable: true, get: function () { return codegen_2.Fileforge; } });
const Client_1 = require("./codegen/api/resources/pdf/client/Client");
const formdata_node_1 = require("formdata-node");
class Pdf extends Client_1.Pdf {
    async generate(files, options, request) {
        let parsedFiles = files;
        if (typeof files === "string") {
            parsedFiles = [
                new formdata_node_1.File([files], "index.html", {
                    type: "text/html",
                }),
            ];
        }
        const params = [
            parsedFiles,
            options,
            request,
        ];
        const responseStream = (await super.generate(...params));
        switch (options.options?.host) {
            case true:
                if (responseStream instanceof ReadableStream) {
                    // @ts-expect-error
                    return (await new Response(responseStream).json());
                }
                else {
                    // @ts-expect-error
                    return JSON.parse(Buffer.concat(await responseStream.toArray()));
                }
            default:
                // @ts-expect-error
                return responseStream;
        }
    }
}
exports.Pdf = Pdf;
class FileforgeClient extends codegen_1.FileforgeClient {
    get pdf() {
        // @ts-expect-error
        return (this._pdf ??= new Pdf(this._options));
    }
}
exports.FileforgeClient = FileforgeClient;
//# sourceMappingURL=index.js.map