{"version":3,"file":"types.js","sourceRoot":"/","sources":["client/codegen/core/schemas/builders/union/types.ts"],"names":[],"mappings":"","sourcesContent":["import { inferParsedObject, inferRawObject, ObjectSchema } from \"../object\";\nimport { Discriminant } from \"./discriminant\";\n\nexport type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {\n    [K in DiscriminantValues]: ObjectSchema<any, any>;\n};\n\nexport type inferRawUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {\n    [K in keyof U]: Record<inferRawDiscriminant<D>, K> & inferRawObject<U[K]>;\n}[keyof U];\n\nexport type inferParsedUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {\n    [K in keyof U]: Record<inferParsedDiscriminant<D>, K> & inferParsedObject<U[K]>;\n}[keyof U];\n\nexport type inferRawDiscriminant<D extends string | Discriminant<any, any>> = D extends string\n    ? D\n    : D extends Discriminant<infer Raw, any>\n    ? Raw\n    : never;\n\nexport type inferParsedDiscriminant<D extends string | Discriminant<any, any>> = D extends string\n    ? D\n    : D extends Discriminant<any, infer Parsed>\n    ? Parsed\n    : never;\n"]}