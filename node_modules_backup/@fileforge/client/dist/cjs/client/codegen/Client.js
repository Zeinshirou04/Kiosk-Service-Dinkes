"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileforgeClient = void 0;
const environments = __importStar(require("./environments"));
const core = __importStar(require("./core"));
const url_join_1 = __importDefault(require("url-join"));
const serializers = __importStar(require("./serialization/index"));
const errors = __importStar(require("./errors/index"));
const Client_1 = require("./api/resources/pdf/client/Client");
class FileforgeClient {
    _options;
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Get the status of the API
     *
     * @param {FileforgeClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fileforge.getStatus()
     */
    async getStatus(requestOptions) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default, "status/"),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return await serializers.GetStatusResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }
        if (_response.error.reason === "status-code") {
            throw new errors.FileforgeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FileforgeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FileforgeTimeoutError();
            case "unknown":
                throw new errors.FileforgeError({
                    message: _response.error.errorMessage,
                });
        }
    }
    _pdf;
    get pdf() {
        return (this._pdf ??= new Client_1.Pdf(this._options));
    }
    async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
exports.FileforgeClient = FileforgeClient;
//# sourceMappingURL=Client.js.map