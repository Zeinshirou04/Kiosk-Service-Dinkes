{"version":3,"file":"maybeSkipValidation.js","sourceRoot":"/","sources":["client/codegen/core/schemas/utils/maybeSkipValidation.ts"],"names":[],"mappings":"AAAA,cAAc;AAKd,MAAM,UAAU,mBAAmB,CAAiD,MAAS;IACzF,OAAO;QACH,GAAG,MAAM;QACT,IAAI,EAAE,+BAA+B,CAAC,MAAM,CAAC,IAAI,CAAC;QAClD,KAAK,EAAE,+BAA+B,CAAC,MAAM,CAAC,KAAK,CAAC;KACvD,CAAC;AACN,CAAC;AAED,SAAS,+BAA+B,CACpC,SAAgF;IAEhF,OAAO,KAAK,EAAE,KAAK,EAAE,IAAI,EAA0B,EAAE;QACjD,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACjD,MAAM,EAAE,cAAc,GAAG,KAAK,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,cAAc,EAAE,CAAC;YACpC,sCAAsC;YACtC,OAAO,CAAC,IAAI,CACR;gBACI,qBAAqB;gBACrB,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,CACrB,CAAC,KAAK,EAAE,EAAE,CACN,MAAM;oBACN,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAC5F;aACJ,CAAC,IAAI,CAAC,IAAI,CAAC,CACf,CAAC;YAEF,OAAO;gBACH,EAAE,EAAE,IAAI;gBACR,KAAK,EAAE,KAAU;aACpB,CAAC;QACN,CAAC;aAAM,CAAC;YACJ,OAAO,WAAW,CAAC;QACvB,CAAC;IACL,CAAC,CAAC;AACN,CAAC","sourcesContent":["// @ts-nocheck\n\n    import { BaseSchema, MaybeValid, SchemaOptions } from \"../Schema\";\nimport { MaybePromise } from \"./MaybePromise\";\n\nexport function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {\n    return {\n        ...schema,\n        json: transformAndMaybeSkipValidation(schema.json),\n        parse: transformAndMaybeSkipValidation(schema.parse),\n    };\n}\n\nfunction transformAndMaybeSkipValidation<T>(\n    transform: (value: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<T>>\n): (value: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<T>> {\n    return async (value, opts): Promise<MaybeValid<T>> => {\n        const transformed = await transform(value, opts);\n        const { skipValidation = false } = opts ?? {};\n        if (!transformed.ok && skipValidation) {\n            // eslint-disable-next-line no-console\n            console.warn(\n                [\n                    \"Failed to validate.\",\n                    ...transformed.errors.map(\n                        (error) =>\n                            \"  - \" +\n                            (error.path.length > 0 ? `${error.path.join(\".\")}: ${error.message}` : error.message)\n                    ),\n                ].join(\"\\n\")\n            );\n\n            return {\n                ok: true,\n                value: value as T,\n            };\n        } else {\n            return transformed;\n        }\n    };\n}\n"]}