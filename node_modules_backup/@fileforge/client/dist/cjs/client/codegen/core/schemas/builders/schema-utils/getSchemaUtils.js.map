{"version":3,"file":"getSchemaUtils.js","sourceRoot":"/","sources":["client/codegen/core/schemas/builders/schema-utils/getSchemaUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseSchema, Schema, SchemaOptions, SchemaType } from \"../../Schema\";\nimport { JsonError } from \"./JsonError\";\nimport { ParseError } from \"./ParseError\";\n\nexport interface SchemaUtils<Raw, Parsed> {\n    optional: () => Schema<Raw | null | undefined, Parsed | undefined>;\n    transform: <Transformed>(transformer: SchemaTransformer<Parsed, Transformed>) => Schema<Raw, Transformed>;\n    parseOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Parsed>;\n    jsonOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Raw>;\n}\n\nexport interface SchemaTransformer<Parsed, Transformed> {\n    transform: (parsed: Parsed) => Transformed;\n    untransform: (transformed: any) => Parsed;\n}\n\nexport function getSchemaUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): SchemaUtils<Raw, Parsed> {\n    return {\n        optional: () => optional(schema),\n        transform: (transformer) => transform(schema, transformer),\n        parseOrThrow: async (raw, opts) => {\n            const parsed = await schema.parse(raw, opts);\n            if (parsed.ok) {\n                return parsed.value;\n            }\n            throw new ParseError(parsed.errors);\n        },\n        jsonOrThrow: async (parsed, opts) => {\n            const raw = await schema.json(parsed, opts);\n            if (raw.ok) {\n                return raw.value;\n            }\n            throw new JsonError(raw.errors);\n        },\n    };\n}\n\n/**\n * schema utils are defined in one file to resolve issues with circular imports\n */\n\nexport function optional<Raw, Parsed>(\n    schema: BaseSchema<Raw, Parsed>\n): Schema<Raw | null | undefined, Parsed | undefined> {\n    const baseSchema: BaseSchema<Raw | null | undefined, Parsed | undefined> = {\n        parse: (raw, opts) => {\n            if (raw == null) {\n                return {\n                    ok: true,\n                    value: undefined,\n                };\n            }\n            return schema.parse(raw, opts);\n        },\n        json: (parsed, opts) => {\n            if (parsed == null) {\n                return {\n                    ok: true,\n                    value: null,\n                };\n            }\n            return schema.json(parsed, opts);\n        },\n        getType: () => SchemaType.OPTIONAL,\n    };\n\n    return {\n        ...baseSchema,\n        ...getSchemaUtils(baseSchema),\n    };\n}\n\nexport function transform<Raw, Parsed, Transformed>(\n    schema: BaseSchema<Raw, Parsed>,\n    transformer: SchemaTransformer<Parsed, Transformed>\n): Schema<Raw, Transformed> {\n    const baseSchema: BaseSchema<Raw, Transformed> = {\n        parse: async (raw, opts) => {\n            const parsed = await schema.parse(raw, opts);\n            if (!parsed.ok) {\n                return parsed;\n            }\n            return {\n                ok: true,\n                value: transformer.transform(parsed.value),\n            };\n        },\n        json: async (transformed, opts) => {\n            const parsed = await transformer.untransform(transformed);\n            return schema.json(parsed, opts);\n        },\n        getType: () => schema.getType(),\n    };\n\n    return {\n        ...baseSchema,\n        ...getSchemaUtils(baseSchema),\n    };\n}\n"]}