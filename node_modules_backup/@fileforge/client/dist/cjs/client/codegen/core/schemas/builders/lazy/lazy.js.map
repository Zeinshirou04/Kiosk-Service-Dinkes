{"version":3,"file":"lazy.js","sourceRoot":"/","sources":["client/codegen/core/schemas/builders/lazy/lazy.ts"],"names":[],"mappings":";;;AACA,kDAAiD;AAIjD,SAAgB,IAAI,CAAc,MAAyC;IACvE,MAAM,UAAU,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;IACnD,OAAO;QACH,GAAG,UAAU;QACb,GAAG,IAAA,6BAAc,EAAC,UAAU,CAAC;KAChC,CAAC;AACN,CAAC;AAND,oBAMC;AAED,SAAgB,uBAAuB,CACnC,MAAyC;IAEzC,OAAO;QACH,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,MAAM,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC;QAC9E,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,MAAM,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC;QAClF,OAAO,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC,MAAM,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE;KACnE,CAAC;AACN,CAAC;AARD,0DAQC;AAIM,KAAK,UAAU,iBAAiB,CACnC,MAAgC;IAEhC,MAAM,YAAY,GAAG,MAAoC,CAAC;IAC1D,IAAI,YAAY,CAAC,eAAe,IAAI,IAAI,EAAE,CAAC;QACvC,YAAY,CAAC,eAAe,GAAG,MAAM,MAAM,EAAE,CAAC;IAClD,CAAC;IACD,OAAO,YAAY,CAAC,eAAe,CAAC;AACxC,CAAC;AARD,8CAQC","sourcesContent":["import { BaseSchema, Schema } from \"../../Schema\";\nimport { getSchemaUtils } from \"../schema-utils\";\n\nexport type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType | Promise<SchemaType>;\n\nexport function lazy<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): Schema<Raw, Parsed> {\n    const baseSchema = constructLazyBaseSchema(getter);\n    return {\n        ...baseSchema,\n        ...getSchemaUtils(baseSchema),\n    };\n}\n\nexport function constructLazyBaseSchema<Raw, Parsed>(\n    getter: SchemaGetter<Schema<Raw, Parsed>>\n): BaseSchema<Raw, Parsed> {\n    return {\n        parse: async (raw, opts) => (await getMemoizedSchema(getter)).parse(raw, opts),\n        json: async (parsed, opts) => (await getMemoizedSchema(getter)).json(parsed, opts),\n        getType: async () => (await getMemoizedSchema(getter)).getType(),\n    };\n}\n\ntype MemoizedGetter<SchemaType extends Schema<any, any>> = SchemaGetter<SchemaType> & { __zurg_memoized?: SchemaType };\n\nexport async function getMemoizedSchema<SchemaType extends Schema<any, any>>(\n    getter: SchemaGetter<SchemaType>\n): Promise<SchemaType> {\n    const castedGetter = getter as MemoizedGetter<SchemaType>;\n    if (castedGetter.__zurg_memoized == null) {\n        castedGetter.__zurg_memoized = await getter();\n    }\n    return castedGetter.__zurg_memoized;\n}\n"]}