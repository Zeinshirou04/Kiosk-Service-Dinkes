"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Form = void 0;
const environments = __importStar(require("../../../../../../environments"));
const core = __importStar(require("../../../../../../core"));
const Fileforge = __importStar(require("../../../../../index"));
const url_join_1 = __importDefault(require("url-join"));
const serializers = __importStar(require("../../../../../../serialization/index"));
const errors = __importStar(require("../../../../../../errors/index"));
class Form {
    _options;
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Returns a list of form fields detected in the PDF document, along with their location, options and requirements. For a more visual representation, use the /pdf/form/mark endpoint.
     *
     * @param {File | fs.ReadStream} file
     * @param {Fileforge.pdf.FormDetectRequest} request
     * @param {Form.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     *
     * @example
     *     await fileforge.pdf.form.detect(fs.createReadStream("/path/to/your/file"), {})
     */
    async detect(file, request, requestOptions) {
        const _request = new core.FormDataWrapper();
        if (request.options != null) {
            await _request.append("options", JSON.stringify(request.options));
        }
        await _request.append("file", file);
        const _maybeEncodedRequest = _request.getRequest();
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default, "pdf/form/detect/"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...(await _maybeEncodedRequest.getHeaders()),
            },
            body: await _maybeEncodedRequest.getBody(),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return await serializers.pdf.form.detect.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }
        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Fileforge.BadRequestError(await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }));
                case 401:
                    throw new Fileforge.UnauthorizedError(await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }));
                case 500:
                    throw new Fileforge.InternalServerError(_response.error.body);
                default:
                    throw new errors.FileforgeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FileforgeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FileforgeTimeoutError();
            case "unknown":
                throw new errors.FileforgeError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Returns a modified PDF document with form fields marked with a green border, and hover text showing the field name.
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     */
    async mark(file, request, requestOptions) {
        const _request = new core.FormDataWrapper();
        if (request.options != null) {
            await _request.append("options", JSON.stringify(request.options));
        }
        await _request.append("file", file);
        const _maybeEncodedRequest = _request.getRequest();
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default, "pdf/form/mark/"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...(await _maybeEncodedRequest.getHeaders()),
            },
            body: await _maybeEncodedRequest.getBody(),
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Fileforge.BadRequestError(await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }));
                case 401:
                    throw new Fileforge.UnauthorizedError(await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }));
                case 500:
                    throw new Fileforge.InternalServerError(_response.error.body);
                default:
                    throw new errors.FileforgeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FileforgeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FileforgeTimeoutError();
            case "unknown":
                throw new errors.FileforgeError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Returns a modified PDF document with filled form fields. A subset of fields can be filled.
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     */
    async fill(file, request, requestOptions) {
        const _request = new core.FormDataWrapper();
        if (request.options != null) {
            await _request.append("options", JSON.stringify(request.options));
        }
        await _request.append("file", file);
        const _maybeEncodedRequest = _request.getRequest();
        const _response = await core.fetcher({
            url: (0, url_join_1.default)((await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default, "pdf/form/fill/"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...(await _maybeEncodedRequest.getHeaders()),
            },
            body: await _maybeEncodedRequest.getBody(),
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }
        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Fileforge.BadRequestError(await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }));
                case 401:
                    throw new Fileforge.UnauthorizedError(await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }));
                case 500:
                    throw new Fileforge.InternalServerError(_response.error.body);
                default:
                    throw new errors.FileforgeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FileforgeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FileforgeTimeoutError();
            case "unknown":
                throw new errors.FileforgeError({
                    message: _response.error.errorMessage,
                });
        }
    }
    async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
exports.Form = Form;
//# sourceMappingURL=Client.js.map