{"version":3,"file":"stringLiteral.js","sourceRoot":"/","sources":["client/codegen/core/schemas/builders/literals/stringLiteral.ts"],"names":[],"mappings":"AAAA,OAAO,EAAU,UAAU,EAAE,MAAM,cAAc,CAAC;AAClD,OAAO,EAAE,2BAA2B,EAAE,MAAM,yCAAyC,CAAC;AACtF,OAAO,EAAE,+BAA+B,EAAE,MAAM,6CAA6C,CAAC;AAE9F,MAAM,UAAU,aAAa,CAAmB,OAAU;IACtD,MAAM,aAAa,GAAG,2BAA2B,CAC7C,UAAU,CAAC,cAAc,EACzB,CAAC,KAAK,EAAE,EAAE,iBAAiB,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE;QACvC,IAAI,KAAK,KAAK,OAAO,EAAE,CAAC;YACpB,OAAO;gBACH,EAAE,EAAE,IAAI;gBACR,KAAK,EAAE,OAAO;aACjB,CAAC;QACN,CAAC;aAAM,CAAC;YACJ,OAAO;gBACH,EAAE,EAAE,KAAK;gBACT,MAAM,EAAE;oBACJ;wBACI,IAAI,EAAE,iBAAiB;wBACvB,OAAO,EAAE,+BAA+B,CAAC,KAAK,EAAE,IAAI,OAAO,GAAG,CAAC;qBAClE;iBACJ;aACJ,CAAC;QACN,CAAC;IACL,CAAC,CACJ,CAAC;IAEF,OAAO,aAAa,EAAE,CAAC;AAC3B,CAAC","sourcesContent":["import { Schema, SchemaType } from \"../../Schema\";\nimport { createIdentitySchemaCreator } from \"../../utils/createIdentitySchemaCreator\";\nimport { getErrorMessageForIncorrectType } from \"../../utils/getErrorMessageForIncorrectType\";\n\nexport function stringLiteral<V extends string>(literal: V): Schema<V, V> {\n    const schemaCreator = createIdentitySchemaCreator(\n        SchemaType.STRING_LITERAL,\n        (value, { breadcrumbsPrefix = [] } = {}) => {\n            if (value === literal) {\n                return {\n                    ok: true,\n                    value: literal,\n                };\n            } else {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: breadcrumbsPrefix,\n                            message: getErrorMessageForIncorrectType(value, `\"${literal}\"`),\n                        },\n                    ],\n                };\n            }\n        }\n    );\n\n    return schemaCreator();\n}\n"]}